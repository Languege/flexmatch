// Code generated by protoc-gen-go. DO NOT EDIT.
// source: match_rpc_service.proto

package open

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BackfillMode int32

const (
	//匹配回填
	BackfillMode_AUTOMATIC BackfillMode = 0
	//MANUAL表示游戏提出回填请求或不使用匹配回填
	BackfillMode_MANUAL BackfillMode = 1
)

var BackfillMode_name = map[int32]string{
	0: "AUTOMATIC",
	1: "MANUAL",
}

var BackfillMode_value = map[string]int32{
	"AUTOMATIC": 0,
	"MANUAL":    1,
}

func (x BackfillMode) String() string {
	return proto.EnumName(BackfillMode_name, int32(x))
}

func (BackfillMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f8708cffbfd778c3, []int{0}
}

type MatchmakingRuleType int32

const (
	MatchmakingRuleType_MatchmakingRuleType_Unknown MatchmakingRuleType = 0
	//comparison-比较规则将一个玩家的属性值与另一个值进行比较。
	//           比较规则属性：
	//                  measurements(测量值)-要比较的玩家属性值。
	//                  referenceValue(参考值)-将测量值与潜在的匹配值进行比较。作用是什么？ measurements里的值与referenceValue进行比较吗, operation为=或者!=时,可为空
	//                  operation(运算符)-<, <=, =, !=, >, >=
	//                  partyAggregation-决定FlexMatch如何处理有多个玩家（当事人）的门票的值。有效的选项包括票据玩家的最小（min）、最大（max）和平均（avg）值。默认值是avg。
	MatchmakingRuleType_MatchmakingRuleType_Comparison MatchmakingRuleType = 1
	//distance-距离规则衡量两个数字值之间的差异，如玩家技能水平之间的距离。例如，一个距离规则可能要求所有玩家至少玩了30个小时的游戏。
	//          距离规则属性：
	//                  measurements(测量值)-要测量距离的玩家属性值。这必须是一个有数值的属性。
	//                  referenceValue(参考值)-用来衡量潜在匹配的距离的数值
	//                  minDistance/maxDistance–成功匹配的最小或最大距离值。
	//                  partyAggregation-如上
	MatchmakingRuleType_MatchmakingRuleType_Distance MatchmakingRuleType = 2
	//collection-集合规则（暂不实现）
	MatchmakingRuleType_MatchmakingRuleType_Collection MatchmakingRuleType = 3
	//batchDistance-批量距离规则测量两个属性值之间的差异。你可以在大匹配和小匹配中使用批量距离规则类型 (王者中段位匹配规则？不能和段位差距过大的参与匹配)
	//              批量距离规则属性:
	//                          batchAttribute-用来形成批次的玩家属性值
	//                          maxDistance-成功匹配的最大距离值。用于比较数字属性。
	//                          partyAggregation-如上
	//例如，这种类型的批次距离规则可能要求比赛中的所有玩家都在彼此的两个技能等级之内。对于这种类型，定义所有票据的 batchAttribute 之间的最大距离。
	MatchmakingRuleType_MatchmakingRuleType_BatchDistance MatchmakingRuleType = 4
	//absoluteSort-绝对排序规则根据指定的球员属性，与添加到该批次的第一张票相比，对一批匹配票进行排序。
	//              绝对排序规则属性：
	//                          sortDirection-匹配票的排序顺序。有效选项包括ascending和descending
	//                          sortAttribute-要对门票进行排序的玩家属性。
	//                          partyAggregation-如上
	MatchmakingRuleType_MatchmakingRuleType_AbsoluteSort MatchmakingRuleType = 5
	//distanceSort-距离排序规则根据指定的球员属性与加入该批次的第一张票的距离，对一批匹配票进行排序。 和absoluteSort有什么区别？距离排序是取绝对值，绝对排序存在正负距离？
	//              距离排序规则属性同absoluteSort
	MatchmakingRuleType_MatchmakingRuleType_DistanceSort MatchmakingRuleType = 6
)

var MatchmakingRuleType_name = map[int32]string{
	0: "MatchmakingRuleType_Unknown",
	1: "MatchmakingRuleType_Comparison",
	2: "MatchmakingRuleType_Distance",
	3: "MatchmakingRuleType_Collection",
	4: "MatchmakingRuleType_BatchDistance",
	5: "MatchmakingRuleType_AbsoluteSort",
	6: "MatchmakingRuleType_DistanceSort",
}

var MatchmakingRuleType_value = map[string]int32{
	"MatchmakingRuleType_Unknown":       0,
	"MatchmakingRuleType_Comparison":    1,
	"MatchmakingRuleType_Distance":      2,
	"MatchmakingRuleType_Collection":    3,
	"MatchmakingRuleType_BatchDistance": 4,
	"MatchmakingRuleType_AbsoluteSort":  5,
	"MatchmakingRuleType_DistanceSort":  6,
}

func (x MatchmakingRuleType) String() string {
	return proto.EnumName(MatchmakingRuleType_name, int32(x))
}

func (MatchmakingRuleType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f8708cffbfd778c3, []int{1}
}

type SortDirectionType int32

const (
	//升序
	SortDirectionType_Ascending SortDirectionType = 0
	//降序
	SortDirectionType_Descending SortDirectionType = 1
)

var SortDirectionType_name = map[int32]string{
	0: "Ascending",
	1: "Descending",
}

var SortDirectionType_value = map[string]int32{
	"Ascending":  0,
	"Descending": 1,
}

func (x SortDirectionType) String() string {
	return proto.EnumName(SortDirectionType_name, int32(x))
}

func (SortDirectionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f8708cffbfd778c3, []int{2}
}

type ComponentType int32

const (
	//rules-规则
	ComponentType_ComponentType_Rules ComponentType = 0
	//teams-团队
	ComponentType_ComponentType_Teams ComponentType = 1
)

var ComponentType_name = map[int32]string{
	0: "ComponentType_Rules",
	1: "ComponentType_Teams",
}

var ComponentType_value = map[string]int32{
	"ComponentType_Rules": 0,
	"ComponentType_Teams": 1,
}

func (x ComponentType) String() string {
	return proto.EnumName(ComponentType_name, int32(x))
}

func (ComponentType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f8708cffbfd778c3, []int{3}
}

//匹配事件类型
type MatchEventType int32

const (
	//票据入缓存队列，还未开始Searching
	MatchEventType_MatchmakingQueued MatchEventType = 0
	//MatchmakingSearching 票据已被输入到匹配中。这包括新的请求和属于潜在匹配失败的请求。
	MatchEventType_MatchmakingSearching MatchEventType = 1
	//PotentialMatchCreated 一个潜在的匹配已经被创建。对于所有新的潜在匹配，不管是否需要接受，都会发出这个消息。
	MatchEventType_PotentialMatchCreated MatchEventType = 2
	//AcceptMatch 玩家已经接受了一场潜在的比赛。这个事件包含了比赛中每个玩家的当前接受状态。缺少的数据意味着AcceptMatch还没有为该玩家调用。
	MatchEventType_AcceptMatch MatchEventType = 3
	//AcceptMatchCompleted 由于玩家接受、玩家拒绝或接受超时，比赛接受完成。
	MatchEventType_AcceptMatchCompleted MatchEventType = 4
	//MatchmakingSucceeded 匹配已经成功完成，并且已经创建了一个游戏会话。
	MatchEventType_MatchmakingSucceeded MatchEventType = 5
	//MatchmakingTimedOut 匹配票因超时而失败。
	MatchEventType_MatchmakingTimedOut MatchEventType = 6
	//MatchmakingCancelled  匹配票已被取消。
	MatchEventType_MatchmakingCancelled MatchEventType = 7
	//MatchmakingFailed
	//匹配票遇到了一个错误。这可能是由于游戏会话队列无法访问或内部错误造成的。
	MatchEventType_MatchmakingFailed MatchEventType = 8
)

var MatchEventType_name = map[int32]string{
	0: "MatchmakingQueued",
	1: "MatchmakingSearching",
	2: "PotentialMatchCreated",
	3: "AcceptMatch",
	4: "AcceptMatchCompleted",
	5: "MatchmakingSucceeded",
	6: "MatchmakingTimedOut",
	7: "MatchmakingCancelled",
	8: "MatchmakingFailed",
}

var MatchEventType_value = map[string]int32{
	"MatchmakingQueued":     0,
	"MatchmakingSearching":  1,
	"PotentialMatchCreated": 2,
	"AcceptMatch":           3,
	"AcceptMatchCompleted":  4,
	"MatchmakingSucceeded":  5,
	"MatchmakingTimedOut":   6,
	"MatchmakingCancelled":  7,
	"MatchmakingFailed":     8,
}

func (x MatchEventType) String() string {
	return proto.EnumName(MatchEventType_name, int32(x))
}

func (MatchEventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f8708cffbfd778c3, []int{4}
}

type MatchmakingTicketStatus int32

const (
	// QUEUED-匹配请求已经收到，目前正在等待处理。
	MatchmakingTicketStatus_QUEUED MatchmakingTicketStatus = 0
	// SEARCHING-匹配请求目前正在处理中。
	MatchmakingTicketStatus_SEARCHING MatchmakingTicketStatus = 1
	// REQUIRES_ACCEPTANCE-匹配已被提出，玩家必须接受该匹配（见AcceptMatch）。该状态仅用于使用具有玩家接受要求的匹配配置的请求。
	MatchmakingTicketStatus_REQUIRES_ACCEPTANCE MatchmakingTicketStatus = 2
	// PLACING-FlexMatch引擎已经匹配了玩家，并正在为比赛安排新的游戏环节。
	MatchmakingTicketStatus_PLACING MatchmakingTicketStatus = 3
	// COMPLETED-玩家已被匹配，游戏会话已准备好接待玩家。在这种状态下的票据包含了玩家的必要连接信息。
	MatchmakingTicketStatus_COMPLETED MatchmakingTicketStatus = 4
	// FAILED-匹配请求没有完成
	MatchmakingTicketStatus_FAILED MatchmakingTicketStatus = 5
	// CANCELLED-他的匹配请求被取消了。这可能是调用StopMatchmaking的结果，或者是一个或多个玩家没有接受的拟议比赛。
	MatchmakingTicketStatus_CANCELLED MatchmakingTicketStatus = 6
	// TIMED_OUT-匹配请求在匹配配置中指定的持续时间内没有成功。
	MatchmakingTicketStatus_TIMED_OUT MatchmakingTicketStatus = 7
)

var MatchmakingTicketStatus_name = map[int32]string{
	0: "QUEUED",
	1: "SEARCHING",
	2: "REQUIRES_ACCEPTANCE",
	3: "PLACING",
	4: "COMPLETED",
	5: "FAILED",
	6: "CANCELLED",
	7: "TIMED_OUT",
}

var MatchmakingTicketStatus_value = map[string]int32{
	"QUEUED":              0,
	"SEARCHING":           1,
	"REQUIRES_ACCEPTANCE": 2,
	"PLACING":             3,
	"COMPLETED":           4,
	"FAILED":              5,
	"CANCELLED":           6,
	"TIMED_OUT":           7,
}

func (x MatchmakingTicketStatus) String() string {
	return proto.EnumName(MatchmakingTicketStatus_name, int32(x))
}

func (MatchmakingTicketStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f8708cffbfd778c3, []int{5}
}

type AcceptanceType int32

const (
	AcceptanceType_UNKNOWN AcceptanceType = 0
	AcceptanceType_ACCEPT  AcceptanceType = 1
	AcceptanceType_REJECT  AcceptanceType = 2
)

var AcceptanceType_name = map[int32]string{
	0: "UNKNOWN",
	1: "ACCEPT",
	2: "REJECT",
}

var AcceptanceType_value = map[string]int32{
	"UNKNOWN": 0,
	"ACCEPT":  1,
	"REJECT":  2,
}

func (x AcceptanceType) String() string {
	return proto.EnumName(AcceptanceType_name, int32(x))
}

func (AcceptanceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f8708cffbfd778c3, []int{6}
}

type CreateGameSessionRequest struct {
	//最大玩家数
	MaximumPlayerSessionCount int32 `protobuf:"varint,1,opt,name=MaximumPlayerSessionCount,proto3" json:"MaximumPlayerSessionCount,omitempty"`
	//游戏透传属性
	GameProperties []*GameProperty `protobuf:"bytes,2,rep,name=GameProperties,proto3" json:"GameProperties,omitempty"`
	//开启游戏会话时透传给游戏服务端的JSON数据
	GameSessionData string `protobuf:"bytes,3,opt,name=GameSessionData,proto3" json:"GameSessionData,omitempty"`
	//匹配ID
	MatchId string `protobuf:"bytes,4,opt,name=MatchId,proto3" json:"MatchId,omitempty"`
	//游戏会话描述 传递对局配置名
	Name string `protobuf:"bytes,5,opt,name=Name,proto3" json:"Name,omitempty"`
	//匹配玩家信息
	Players              []*MatchedPlayerSession `protobuf:"bytes,6,rep,name=Players,proto3" json:"Players,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *CreateGameSessionRequest) Reset()         { *m = CreateGameSessionRequest{} }
func (m *CreateGameSessionRequest) String() string { return proto.CompactTextString(m) }
func (*CreateGameSessionRequest) ProtoMessage()    {}
func (*CreateGameSessionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8708cffbfd778c3, []int{0}
}

func (m *CreateGameSessionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateGameSessionRequest.Unmarshal(m, b)
}
func (m *CreateGameSessionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateGameSessionRequest.Marshal(b, m, deterministic)
}
func (m *CreateGameSessionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateGameSessionRequest.Merge(m, src)
}
func (m *CreateGameSessionRequest) XXX_Size() int {
	return xxx_messageInfo_CreateGameSessionRequest.Size(m)
}
func (m *CreateGameSessionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateGameSessionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateGameSessionRequest proto.InternalMessageInfo

func (m *CreateGameSessionRequest) GetMaximumPlayerSessionCount() int32 {
	if m != nil {
		return m.MaximumPlayerSessionCount
	}
	return 0
}

func (m *CreateGameSessionRequest) GetGameProperties() []*GameProperty {
	if m != nil {
		return m.GameProperties
	}
	return nil
}

func (m *CreateGameSessionRequest) GetGameSessionData() string {
	if m != nil {
		return m.GameSessionData
	}
	return ""
}

func (m *CreateGameSessionRequest) GetMatchId() string {
	if m != nil {
		return m.MatchId
	}
	return ""
}

func (m *CreateGameSessionRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateGameSessionRequest) GetPlayers() []*MatchedPlayerSession {
	if m != nil {
		return m.Players
	}
	return nil
}

type CreateGameSessionResponse struct {
	//游戏会话
	GameSession          *GameSession `protobuf:"bytes,1,opt,name=GameSession,proto3" json:"GameSession,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *CreateGameSessionResponse) Reset()         { *m = CreateGameSessionResponse{} }
func (m *CreateGameSessionResponse) String() string { return proto.CompactTextString(m) }
func (*CreateGameSessionResponse) ProtoMessage()    {}
func (*CreateGameSessionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8708cffbfd778c3, []int{1}
}

func (m *CreateGameSessionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateGameSessionResponse.Unmarshal(m, b)
}
func (m *CreateGameSessionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateGameSessionResponse.Marshal(b, m, deterministic)
}
func (m *CreateGameSessionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateGameSessionResponse.Merge(m, src)
}
func (m *CreateGameSessionResponse) XXX_Size() int {
	return xxx_messageInfo_CreateGameSessionResponse.Size(m)
}
func (m *CreateGameSessionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateGameSessionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateGameSessionResponse proto.InternalMessageInfo

func (m *CreateGameSessionResponse) GetGameSession() *GameSession {
	if m != nil {
		return m.GameSession
	}
	return nil
}

type GameProperty struct {
	//属性key
	Key string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	//属性值
	Value                string   `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameProperty) Reset()         { *m = GameProperty{} }
func (m *GameProperty) String() string { return proto.CompactTextString(m) }
func (*GameProperty) ProtoMessage()    {}
func (*GameProperty) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8708cffbfd778c3, []int{2}
}

func (m *GameProperty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameProperty.Unmarshal(m, b)
}
func (m *GameProperty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameProperty.Marshal(b, m, deterministic)
}
func (m *GameProperty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameProperty.Merge(m, src)
}
func (m *GameProperty) XXX_Size() int {
	return xxx_messageInfo_GameProperty.Size(m)
}
func (m *GameProperty) XXX_DiscardUnknown() {
	xxx_messageInfo_GameProperty.DiscardUnknown(m)
}

var xxx_messageInfo_GameProperty proto.InternalMessageInfo

func (m *GameProperty) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *GameProperty) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

//匹配配置 https://docs.aws.amazon.com/zh_cn/gamelift/latest/apireference/API_MatchmakingConfiguration.html
type MatchmakingConfiguration struct {
	//一个标志，表示用此配置创建的匹配是否必须被匹配的玩家接受。若要求接受，设置为TRUE。
	//当这个选项被启用时，匹配票使用状态REQUIRES_ACCEPTANCE来指示完成的潜在匹配正在等
	//待玩家接受。
	// 必须：否
	AcceptanceRequired bool `protobuf:"varint,1,opt,name=AcceptanceRequired,proto3" json:"AcceptanceRequired,omitempty"`
	//如果需要接受，等待玩家接受提议的比赛的时间长度（秒）。如果有玩家拒绝比赛或在超时前没
	//有接受，门票继续寻找可接受的比赛。
	//值域： 1-600
	// 必须： 否
	AcceptanceTimeoutSeconds int64 `protobuf:"varint,2,opt,name=AcceptanceTimeoutSeconds,proto3" json:"AcceptanceTimeoutSeconds,omitempty"`
	//用于回填用该匹配配置创建的游戏会话的方法。MANUAL表示游戏提出回填请求或不使用匹配回填
	//功能。AUTOMATIC表示，只要游戏会话有一个或多个空位，GameLift就会创建StartMatchBackfill请求。
	//了解更多关于手动和自动回填的信息，请参见用FlexMatch回填现有游戏。当FlexMatchMode设置为STANDALONE时，
	//自动回填不可用。
	//值域：AUTOMATIC | MANUAL
	// 必须：否
	BackfillMode string `protobuf:"bytes,4,opt,name=BackfillMode,proto3" json:"BackfillMode,omitempty"`
	//一个描述性的标签，与匹配配置有关。
	// 必须：否
	Description string `protobuf:"bytes,8,opt,name=Description,proto3" json:"Description,omitempty"`
	//表示该匹配配置是与GameLift托管一起使用还是作为独立的匹配解决方案。
	//    STANDALONE - FlexMatch形成比赛，并在MatchmakingSucceeded事件中返回比赛信息，包括球员和球队的分配。
	//    WITH_QUEUE - FlexMatch组建比赛并使用指定的GameLift队列来启动比赛的游戏会话。 （对局由其他服务实现！！！）
	// 必须：否
	FlexMatchMode string `protobuf:"bytes,9,opt,name=FlexMatchMode,proto3" json:"FlexMatchMode,omitempty"`
	//一组游戏会话的自定义属性，格式为键：值对。这些属性在GameSession对象中被传递给游戏服务器进程，
	//并请求启动一个新的游戏会话（见启动游戏会话）。这些信息被添加到新的GameSession对象中，该对象
	//是为一个成功的比赛而创建的。当FlexMatchMode设置为STANDALONE时，这个参数不被使用。
	//必须：否
	GameProperties []*GameProperty `protobuf:"bytes,10,rep,name=GameProperties,proto3" json:"GameProperties,omitempty"`
	//开启游戏会话时透传给游戏服务端的JSON数据
	GameSessionData string `protobuf:"bytes,11,opt,name=GameSessionData,proto3" json:"GameSessionData,omitempty"`
	//匹配配置的唯一标识符。该名称用于识别与匹配请求或票据相关的配置。
	Name string `protobuf:"bytes,13,opt,name=Name,proto3" json:"Name,omitempty"`
	//一个SNS主题ARN，它被设置为接收匹配通知。
	NotificationTarget string `protobuf:"bytes,14,opt,name=NotificationTarget,proto3" json:"NotificationTarget,omitempty"`
	//匹配票在超时前可以保持在进程中的最大持续时间（秒）。由于超时而失败的请求可以根据需要重新提交。
	//值域:1-43200 (12小时)
	//必须:否
	RequestTimeoutSeconds int64 `protobuf:"varint,15,opt,name=RequestTimeoutSeconds,proto3" json:"RequestTimeoutSeconds,omitempty"`
	//规则集
	RuleSet *MatchmakingRuleSet `protobuf:"bytes,16,opt,name=RuleSet,proto3" json:"RuleSet,omitempty"`
	//匹配事件队列topic 默认和Name保持一致
	MatchEventQueueTopic string `protobuf:"bytes,17,opt,name=MatchEventQueueTopic,proto3" json:"MatchEventQueueTopic,omitempty"`
	//调试模式： 调试模式下不会真正创建对局，且加强日志打印
	Debug                bool     `protobuf:"varint,18,opt,name=Debug,proto3" json:"Debug,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MatchmakingConfiguration) Reset()         { *m = MatchmakingConfiguration{} }
func (m *MatchmakingConfiguration) String() string { return proto.CompactTextString(m) }
func (*MatchmakingConfiguration) ProtoMessage()    {}
func (*MatchmakingConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8708cffbfd778c3, []int{3}
}

func (m *MatchmakingConfiguration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MatchmakingConfiguration.Unmarshal(m, b)
}
func (m *MatchmakingConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MatchmakingConfiguration.Marshal(b, m, deterministic)
}
func (m *MatchmakingConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchmakingConfiguration.Merge(m, src)
}
func (m *MatchmakingConfiguration) XXX_Size() int {
	return xxx_messageInfo_MatchmakingConfiguration.Size(m)
}
func (m *MatchmakingConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchmakingConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_MatchmakingConfiguration proto.InternalMessageInfo

func (m *MatchmakingConfiguration) GetAcceptanceRequired() bool {
	if m != nil {
		return m.AcceptanceRequired
	}
	return false
}

func (m *MatchmakingConfiguration) GetAcceptanceTimeoutSeconds() int64 {
	if m != nil {
		return m.AcceptanceTimeoutSeconds
	}
	return 0
}

func (m *MatchmakingConfiguration) GetBackfillMode() string {
	if m != nil {
		return m.BackfillMode
	}
	return ""
}

func (m *MatchmakingConfiguration) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MatchmakingConfiguration) GetFlexMatchMode() string {
	if m != nil {
		return m.FlexMatchMode
	}
	return ""
}

func (m *MatchmakingConfiguration) GetGameProperties() []*GameProperty {
	if m != nil {
		return m.GameProperties
	}
	return nil
}

func (m *MatchmakingConfiguration) GetGameSessionData() string {
	if m != nil {
		return m.GameSessionData
	}
	return ""
}

func (m *MatchmakingConfiguration) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MatchmakingConfiguration) GetNotificationTarget() string {
	if m != nil {
		return m.NotificationTarget
	}
	return ""
}

func (m *MatchmakingConfiguration) GetRequestTimeoutSeconds() int64 {
	if m != nil {
		return m.RequestTimeoutSeconds
	}
	return 0
}

func (m *MatchmakingConfiguration) GetRuleSet() *MatchmakingRuleSet {
	if m != nil {
		return m.RuleSet
	}
	return nil
}

func (m *MatchmakingConfiguration) GetMatchEventQueueTopic() string {
	if m != nil {
		return m.MatchEventQueueTopic
	}
	return ""
}

func (m *MatchmakingConfiguration) GetDebug() bool {
	if m != nil {
		return m.Debug
	}
	return false
}

type PlayerAttribute struct {
	//属性名
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	//数据类型
	Type string `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`
	//属性值
	Value                string   `protobuf:"bytes,3,opt,name=Value,proto3" json:"Value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerAttribute) Reset()         { *m = PlayerAttribute{} }
func (m *PlayerAttribute) String() string { return proto.CompactTextString(m) }
func (*PlayerAttribute) ProtoMessage()    {}
func (*PlayerAttribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8708cffbfd778c3, []int{4}
}

func (m *PlayerAttribute) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayerAttribute.Unmarshal(m, b)
}
func (m *PlayerAttribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayerAttribute.Marshal(b, m, deterministic)
}
func (m *PlayerAttribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerAttribute.Merge(m, src)
}
func (m *PlayerAttribute) XXX_Size() int {
	return xxx_messageInfo_PlayerAttribute.Size(m)
}
func (m *PlayerAttribute) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerAttribute.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerAttribute proto.InternalMessageInfo

func (m *PlayerAttribute) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PlayerAttribute) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *PlayerAttribute) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

//https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-design-ruleset.html#match-rulesets-components-algorithm
//你可以配置FlexMatch，在形成批次之前对票池进行分类。
//这种类型的定制对有大票池的游戏最有效。批前排序可以帮助加快匹配过程，
//提高玩家在定义特征上的统一性。
//使用算法属性 batchingPreference 来定义批前排序方法。默认设置是random(也就是不做批前排序，按ticket加入到队列的时间)。
type MatchmakingRuleAlgorithm struct {
	//批次偏好，批前排序：
	// sorted - 提供一个玩家属性列表，对票池进行预排序。然后，FlexMatch创建的批次在排序的属性上更加统一。
	//          例如，如果你按玩家技能对票池进行预排序，FlexMatch会将技能水平相似的票放在一起。如果你的规
	//          则集也包含了基于玩家技能的匹配规则，那么预批排序可以提高匹配效率。
	BatchingPreference string `protobuf:"bytes,1,opt,name=BatchingPreference,proto3" json:"BatchingPreference,omitempty"`
	//玩家排序属性
	SortByAttributes     []string `protobuf:"bytes,2,rep,name=SortByAttributes,proto3" json:"SortByAttributes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MatchmakingRuleAlgorithm) Reset()         { *m = MatchmakingRuleAlgorithm{} }
func (m *MatchmakingRuleAlgorithm) String() string { return proto.CompactTextString(m) }
func (*MatchmakingRuleAlgorithm) ProtoMessage()    {}
func (*MatchmakingRuleAlgorithm) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8708cffbfd778c3, []int{5}
}

func (m *MatchmakingRuleAlgorithm) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MatchmakingRuleAlgorithm.Unmarshal(m, b)
}
func (m *MatchmakingRuleAlgorithm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MatchmakingRuleAlgorithm.Marshal(b, m, deterministic)
}
func (m *MatchmakingRuleAlgorithm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchmakingRuleAlgorithm.Merge(m, src)
}
func (m *MatchmakingRuleAlgorithm) XXX_Size() int {
	return xxx_messageInfo_MatchmakingRuleAlgorithm.Size(m)
}
func (m *MatchmakingRuleAlgorithm) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchmakingRuleAlgorithm.DiscardUnknown(m)
}

var xxx_messageInfo_MatchmakingRuleAlgorithm proto.InternalMessageInfo

func (m *MatchmakingRuleAlgorithm) GetBatchingPreference() string {
	if m != nil {
		return m.BatchingPreference
	}
	return ""
}

func (m *MatchmakingRuleAlgorithm) GetSortByAttributes() []string {
	if m != nil {
		return m.SortByAttributes
	}
	return nil
}

type MatchmakingRule struct {
	//规则名
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	//规则描述
	Description string              `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	Type        MatchmakingRuleType `protobuf:"varint,3,opt,name=Type,proto3,enum=open.MatchmakingRuleType" json:"Type,omitempty"`
	//测量值表达式
	Measurements string `protobuf:"bytes,4,opt,name=Measurements,proto3" json:"Measurements,omitempty"`
	//参考值表达式
	ReferenceValue string `protobuf:"bytes,5,opt,name=ReferenceValue,proto3" json:"ReferenceValue,omitempty"`
	//最大筛选距离，Type为distance时生效，筛选目标匹配属性到当前值的最大绝对值（距离）
	MaxDistance float64 `protobuf:"fixed64,6,opt,name=MaxDistance,proto3" json:"MaxDistance,omitempty"`
	//比较运算符，Type为comparison时生效，包含：=, !=, <, <=, >, >=
	Operation string `protobuf:"bytes,7,opt,name=Operation,proto3" json:"Operation,omitempty"`
	//决定FlexMatch如何处理有多个玩家（当事人）的门票的值。有效的选项包括票据玩家的最小（min）、最大（max）和平均（avg）值。默认值是avg
	PartyAggregation string `protobuf:"bytes,8,opt,name=PartyAggregation,proto3" json:"PartyAggregation,omitempty"`
	//用来形成批次的玩家属性值
	BatchAttribute string `protobuf:"bytes,9,opt,name=BatchAttribute,proto3" json:"BatchAttribute,omitempty"`
	//排序属性
	SortAttribute string `protobuf:"bytes,10,opt,name=SortAttribute,proto3" json:"SortAttribute,omitempty"`
	//升序或降序
	SortDirection        SortDirectionType `protobuf:"varint,11,opt,name=SortDirection,proto3,enum=open.SortDirectionType" json:"SortDirection,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *MatchmakingRule) Reset()         { *m = MatchmakingRule{} }
func (m *MatchmakingRule) String() string { return proto.CompactTextString(m) }
func (*MatchmakingRule) ProtoMessage()    {}
func (*MatchmakingRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8708cffbfd778c3, []int{6}
}

func (m *MatchmakingRule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MatchmakingRule.Unmarshal(m, b)
}
func (m *MatchmakingRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MatchmakingRule.Marshal(b, m, deterministic)
}
func (m *MatchmakingRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchmakingRule.Merge(m, src)
}
func (m *MatchmakingRule) XXX_Size() int {
	return xxx_messageInfo_MatchmakingRule.Size(m)
}
func (m *MatchmakingRule) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchmakingRule.DiscardUnknown(m)
}

var xxx_messageInfo_MatchmakingRule proto.InternalMessageInfo

func (m *MatchmakingRule) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MatchmakingRule) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MatchmakingRule) GetType() MatchmakingRuleType {
	if m != nil {
		return m.Type
	}
	return MatchmakingRuleType_MatchmakingRuleType_Unknown
}

func (m *MatchmakingRule) GetMeasurements() string {
	if m != nil {
		return m.Measurements
	}
	return ""
}

func (m *MatchmakingRule) GetReferenceValue() string {
	if m != nil {
		return m.ReferenceValue
	}
	return ""
}

func (m *MatchmakingRule) GetMaxDistance() float64 {
	if m != nil {
		return m.MaxDistance
	}
	return 0
}

func (m *MatchmakingRule) GetOperation() string {
	if m != nil {
		return m.Operation
	}
	return ""
}

func (m *MatchmakingRule) GetPartyAggregation() string {
	if m != nil {
		return m.PartyAggregation
	}
	return ""
}

func (m *MatchmakingRule) GetBatchAttribute() string {
	if m != nil {
		return m.BatchAttribute
	}
	return ""
}

func (m *MatchmakingRule) GetSortAttribute() string {
	if m != nil {
		return m.SortAttribute
	}
	return ""
}

func (m *MatchmakingRule) GetSortDirection() SortDirectionType {
	if m != nil {
		return m.SortDirection
	}
	return SortDirectionType_Ascending
}

type MatchmakingTeamConfiguration struct {
	Name                 string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	PlayerNumber         int32    `protobuf:"varint,2,opt,name=PlayerNumber,proto3" json:"PlayerNumber,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MatchmakingTeamConfiguration) Reset()         { *m = MatchmakingTeamConfiguration{} }
func (m *MatchmakingTeamConfiguration) String() string { return proto.CompactTextString(m) }
func (*MatchmakingTeamConfiguration) ProtoMessage()    {}
func (*MatchmakingTeamConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8708cffbfd778c3, []int{7}
}

func (m *MatchmakingTeamConfiguration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MatchmakingTeamConfiguration.Unmarshal(m, b)
}
func (m *MatchmakingTeamConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MatchmakingTeamConfiguration.Marshal(b, m, deterministic)
}
func (m *MatchmakingTeamConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchmakingTeamConfiguration.Merge(m, src)
}
func (m *MatchmakingTeamConfiguration) XXX_Size() int {
	return xxx_messageInfo_MatchmakingTeamConfiguration.Size(m)
}
func (m *MatchmakingTeamConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchmakingTeamConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_MatchmakingTeamConfiguration proto.InternalMessageInfo

func (m *MatchmakingTeamConfiguration) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MatchmakingTeamConfiguration) GetPlayerNumber() int32 {
	if m != nil {
		return m.PlayerNumber
	}
	return 0
}

//匹配团队
type MatchTeam struct {
	Conf                 *MatchmakingTeamConfiguration `protobuf:"bytes,1,opt,name=Conf,proto3" json:"Conf,omitempty"`
	Tickets              []*MatchmakingTicket          `protobuf:"bytes,2,rep,name=Tickets,proto3" json:"Tickets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *MatchTeam) Reset()         { *m = MatchTeam{} }
func (m *MatchTeam) String() string { return proto.CompactTextString(m) }
func (*MatchTeam) ProtoMessage()    {}
func (*MatchTeam) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8708cffbfd778c3, []int{8}
}

func (m *MatchTeam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MatchTeam.Unmarshal(m, b)
}
func (m *MatchTeam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MatchTeam.Marshal(b, m, deterministic)
}
func (m *MatchTeam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchTeam.Merge(m, src)
}
func (m *MatchTeam) XXX_Size() int {
	return xxx_messageInfo_MatchTeam.Size(m)
}
func (m *MatchTeam) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchTeam.DiscardUnknown(m)
}

var xxx_messageInfo_MatchTeam proto.InternalMessageInfo

func (m *MatchTeam) GetConf() *MatchmakingTeamConfiguration {
	if m != nil {
		return m.Conf
	}
	return nil
}

func (m *MatchTeam) GetTickets() []*MatchmakingTicket {
	if m != nil {
		return m.Tickets
	}
	return nil
}

type MatchmakingExpansionRuleTarget struct {
	//组件类型 rules-规则 teams-团队
	ComponentType ComponentType `protobuf:"varint,1,opt,name=ComponentType,proto3,enum=open.ComponentType" json:"ComponentType,omitempty"`
	//组件名 例如 当ComponentName为rules，对规则minSkill进行扩展
	ComponentName string `protobuf:"bytes,2,opt,name=ComponentName,proto3" json:"ComponentName,omitempty"`
	//目标组件属性,例如referenceValue
	Attribute            string   `protobuf:"bytes,3,opt,name=Attribute,proto3" json:"Attribute,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MatchmakingExpansionRuleTarget) Reset()         { *m = MatchmakingExpansionRuleTarget{} }
func (m *MatchmakingExpansionRuleTarget) String() string { return proto.CompactTextString(m) }
func (*MatchmakingExpansionRuleTarget) ProtoMessage()    {}
func (*MatchmakingExpansionRuleTarget) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8708cffbfd778c3, []int{9}
}

func (m *MatchmakingExpansionRuleTarget) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MatchmakingExpansionRuleTarget.Unmarshal(m, b)
}
func (m *MatchmakingExpansionRuleTarget) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MatchmakingExpansionRuleTarget.Marshal(b, m, deterministic)
}
func (m *MatchmakingExpansionRuleTarget) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchmakingExpansionRuleTarget.Merge(m, src)
}
func (m *MatchmakingExpansionRuleTarget) XXX_Size() int {
	return xxx_messageInfo_MatchmakingExpansionRuleTarget.Size(m)
}
func (m *MatchmakingExpansionRuleTarget) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchmakingExpansionRuleTarget.DiscardUnknown(m)
}

var xxx_messageInfo_MatchmakingExpansionRuleTarget proto.InternalMessageInfo

func (m *MatchmakingExpansionRuleTarget) GetComponentType() ComponentType {
	if m != nil {
		return m.ComponentType
	}
	return ComponentType_ComponentType_Rules
}

func (m *MatchmakingExpansionRuleTarget) GetComponentName() string {
	if m != nil {
		return m.ComponentName
	}
	return ""
}

func (m *MatchmakingExpansionRuleTarget) GetAttribute() string {
	if m != nil {
		return m.Attribute
	}
	return ""
}

//扩张阶段
type MatchmakingExpansionRuleStep struct {
	//匹配等待时间
	WaitTimeSeconds int64 `protobuf:"varint,1,opt,name=WaitTimeSeconds,proto3" json:"WaitTimeSeconds,omitempty"`
	//扩张后的值
	Value                float64  `protobuf:"fixed64,2,opt,name=Value,proto3" json:"Value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MatchmakingExpansionRuleStep) Reset()         { *m = MatchmakingExpansionRuleStep{} }
func (m *MatchmakingExpansionRuleStep) String() string { return proto.CompactTextString(m) }
func (*MatchmakingExpansionRuleStep) ProtoMessage()    {}
func (*MatchmakingExpansionRuleStep) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8708cffbfd778c3, []int{10}
}

func (m *MatchmakingExpansionRuleStep) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MatchmakingExpansionRuleStep.Unmarshal(m, b)
}
func (m *MatchmakingExpansionRuleStep) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MatchmakingExpansionRuleStep.Marshal(b, m, deterministic)
}
func (m *MatchmakingExpansionRuleStep) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchmakingExpansionRuleStep.Merge(m, src)
}
func (m *MatchmakingExpansionRuleStep) XXX_Size() int {
	return xxx_messageInfo_MatchmakingExpansionRuleStep.Size(m)
}
func (m *MatchmakingExpansionRuleStep) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchmakingExpansionRuleStep.DiscardUnknown(m)
}

var xxx_messageInfo_MatchmakingExpansionRuleStep proto.InternalMessageInfo

func (m *MatchmakingExpansionRuleStep) GetWaitTimeSeconds() int64 {
	if m != nil {
		return m.WaitTimeSeconds
	}
	return 0
}

func (m *MatchmakingExpansionRuleStep) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

//扩张配置
type MatchmakingExpansionRule struct {
	//目标，例如选择规则minSkill的参考值为: {ComponentType:rules,ComponentName:minSKill,Attribute:referenceValue}
	Target *MatchmakingExpansionRuleTarget `protobuf:"bytes,1,opt,name=Target,proto3" json:"Target,omitempty"`
	//固定扩张距离/次
	FixedExpansionDistance float64 `protobuf:"fixed64,2,opt,name=FixedExpansionDistance,proto3" json:"FixedExpansionDistance,omitempty"`
	//扩张阶段， FixedExpansionDistance为空时生效
	Steps                []*MatchmakingExpansionRuleStep `protobuf:"bytes,3,rep,name=Steps,proto3" json:"Steps,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *MatchmakingExpansionRule) Reset()         { *m = MatchmakingExpansionRule{} }
func (m *MatchmakingExpansionRule) String() string { return proto.CompactTextString(m) }
func (*MatchmakingExpansionRule) ProtoMessage()    {}
func (*MatchmakingExpansionRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8708cffbfd778c3, []int{11}
}

func (m *MatchmakingExpansionRule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MatchmakingExpansionRule.Unmarshal(m, b)
}
func (m *MatchmakingExpansionRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MatchmakingExpansionRule.Marshal(b, m, deterministic)
}
func (m *MatchmakingExpansionRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchmakingExpansionRule.Merge(m, src)
}
func (m *MatchmakingExpansionRule) XXX_Size() int {
	return xxx_messageInfo_MatchmakingExpansionRule.Size(m)
}
func (m *MatchmakingExpansionRule) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchmakingExpansionRule.DiscardUnknown(m)
}

var xxx_messageInfo_MatchmakingExpansionRule proto.InternalMessageInfo

func (m *MatchmakingExpansionRule) GetTarget() *MatchmakingExpansionRuleTarget {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *MatchmakingExpansionRule) GetFixedExpansionDistance() float64 {
	if m != nil {
		return m.FixedExpansionDistance
	}
	return 0
}

func (m *MatchmakingExpansionRule) GetSteps() []*MatchmakingExpansionRuleStep {
	if m != nil {
		return m.Steps
	}
	return nil
}

//创建匹配池
type MatchmakingRuleSet struct {
	//玩家属性
	PlayerAttributes []*PlayerAttribute `protobuf:"bytes,2,rep,name=PlayerAttributes,proto3" json:"PlayerAttributes,omitempty"`
	//团队
	Teams                []*MatchmakingTeamConfiguration `protobuf:"bytes,3,rep,name=Teams,proto3" json:"Teams,omitempty"`
	Rules                []*MatchmakingRule              `protobuf:"bytes,4,rep,name=Rules,proto3" json:"Rules,omitempty"`
	Expansions           []*MatchmakingExpansionRule     `protobuf:"bytes,5,rep,name=Expansions,proto3" json:"Expansions,omitempty"`
	Algorithm            *MatchmakingRuleAlgorithm       `protobuf:"bytes,6,opt,name=Algorithm,proto3" json:"Algorithm,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *MatchmakingRuleSet) Reset()         { *m = MatchmakingRuleSet{} }
func (m *MatchmakingRuleSet) String() string { return proto.CompactTextString(m) }
func (*MatchmakingRuleSet) ProtoMessage()    {}
func (*MatchmakingRuleSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8708cffbfd778c3, []int{12}
}

func (m *MatchmakingRuleSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MatchmakingRuleSet.Unmarshal(m, b)
}
func (m *MatchmakingRuleSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MatchmakingRuleSet.Marshal(b, m, deterministic)
}
func (m *MatchmakingRuleSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchmakingRuleSet.Merge(m, src)
}
func (m *MatchmakingRuleSet) XXX_Size() int {
	return xxx_messageInfo_MatchmakingRuleSet.Size(m)
}
func (m *MatchmakingRuleSet) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchmakingRuleSet.DiscardUnknown(m)
}

var xxx_messageInfo_MatchmakingRuleSet proto.InternalMessageInfo

func (m *MatchmakingRuleSet) GetPlayerAttributes() []*PlayerAttribute {
	if m != nil {
		return m.PlayerAttributes
	}
	return nil
}

func (m *MatchmakingRuleSet) GetTeams() []*MatchmakingTeamConfiguration {
	if m != nil {
		return m.Teams
	}
	return nil
}

func (m *MatchmakingRuleSet) GetRules() []*MatchmakingRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

func (m *MatchmakingRuleSet) GetExpansions() []*MatchmakingExpansionRule {
	if m != nil {
		return m.Expansions
	}
	return nil
}

func (m *MatchmakingRuleSet) GetAlgorithm() *MatchmakingRuleAlgorithm {
	if m != nil {
		return m.Algorithm
	}
	return nil
}

//匹配事件
type MatchEvent struct {
	//事件类型
	MatchEventType MatchEventType `protobuf:"varint,1,opt,name=MatchEventType,proto3,enum=open.MatchEventType" json:"MatchEventType,omitempty"`
	//匹配票
	Tickets []*MatchmakingTicket `protobuf:"bytes,2,rep,name=Tickets,proto3" json:"Tickets,omitempty"`
	//预计等待时间（毫秒） MatchmakingSearching 存在
	EstimatedWaitMillis int64 `protobuf:"varint,3,opt,name=EstimatedWaitMillis,proto3" json:"EstimatedWaitMillis,omitempty"`
	//是否要求匹配接受
	AcceptanceRequired bool `protobuf:"varint,4,opt,name=AcceptanceRequired,proto3" json:"AcceptanceRequired,omitempty"`
	//匹配接受超时时间（秒）PotentialMatchCreated 存在
	AcceptanceTimeout int64 `protobuf:"varint,5,opt,name=AcceptanceTimeout,proto3" json:"AcceptanceTimeout,omitempty"`
	//匹配ID PotentialMatchCreated,AcceptMatch,AcceptMatchCompleted,MatchmakingSucceeded存在
	MatchId string `protobuf:"bytes,6,opt,name=MatchId,proto3" json:"MatchId,omitempty"`
	//匹配接受阶段完成原因 AcceptMatchCompleted 存在
	AcceptanceCompletedReason string `protobuf:"bytes,7,opt,name=AcceptanceCompletedReason,proto3" json:"AcceptanceCompletedReason,omitempty"`
	//原因 值域：TimedOut|Cancelled|UNEXPECTED_ERROR。MatchmakingTimedOut,MatchmakingCancelled,MatchmakingFailed 存在
	Reason string `protobuf:"bytes,8,opt,name=Reason,proto3" json:"Reason,omitempty"`
	//对原因的描述
	Message string `protobuf:"bytes,9,opt,name=Message,proto3" json:"Message,omitempty"`
	//游戏回话信息
	GameSessionInfo      *GameSessionConnectionInfo `protobuf:"bytes,10,opt,name=GameSessionInfo,proto3" json:"GameSessionInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *MatchEvent) Reset()         { *m = MatchEvent{} }
func (m *MatchEvent) String() string { return proto.CompactTextString(m) }
func (*MatchEvent) ProtoMessage()    {}
func (*MatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8708cffbfd778c3, []int{13}
}

func (m *MatchEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MatchEvent.Unmarshal(m, b)
}
func (m *MatchEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MatchEvent.Marshal(b, m, deterministic)
}
func (m *MatchEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchEvent.Merge(m, src)
}
func (m *MatchEvent) XXX_Size() int {
	return xxx_messageInfo_MatchEvent.Size(m)
}
func (m *MatchEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchEvent.DiscardUnknown(m)
}

var xxx_messageInfo_MatchEvent proto.InternalMessageInfo

func (m *MatchEvent) GetMatchEventType() MatchEventType {
	if m != nil {
		return m.MatchEventType
	}
	return MatchEventType_MatchmakingQueued
}

func (m *MatchEvent) GetTickets() []*MatchmakingTicket {
	if m != nil {
		return m.Tickets
	}
	return nil
}

func (m *MatchEvent) GetEstimatedWaitMillis() int64 {
	if m != nil {
		return m.EstimatedWaitMillis
	}
	return 0
}

func (m *MatchEvent) GetAcceptanceRequired() bool {
	if m != nil {
		return m.AcceptanceRequired
	}
	return false
}

func (m *MatchEvent) GetAcceptanceTimeout() int64 {
	if m != nil {
		return m.AcceptanceTimeout
	}
	return 0
}

func (m *MatchEvent) GetMatchId() string {
	if m != nil {
		return m.MatchId
	}
	return ""
}

func (m *MatchEvent) GetAcceptanceCompletedReason() string {
	if m != nil {
		return m.AcceptanceCompletedReason
	}
	return ""
}

func (m *MatchEvent) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *MatchEvent) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *MatchEvent) GetGameSessionInfo() *GameSessionConnectionInfo {
	if m != nil {
		return m.GameSessionInfo
	}
	return nil
}

//玩家会话
type MatchedPlayerSession struct {
	UserId               int64    `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	AgentSvcID           string   `protobuf:"bytes,2,opt,name=AgentSvcID,proto3" json:"AgentSvcID,omitempty"`
	AgentSessionID       string   `protobuf:"bytes,3,opt,name=AgentSessionID,proto3" json:"AgentSessionID,omitempty"`
	Team                 string   `protobuf:"bytes,4,opt,name=Team,proto3" json:"Team,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MatchedPlayerSession) Reset()         { *m = MatchedPlayerSession{} }
func (m *MatchedPlayerSession) String() string { return proto.CompactTextString(m) }
func (*MatchedPlayerSession) ProtoMessage()    {}
func (*MatchedPlayerSession) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8708cffbfd778c3, []int{14}
}

func (m *MatchedPlayerSession) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MatchedPlayerSession.Unmarshal(m, b)
}
func (m *MatchedPlayerSession) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MatchedPlayerSession.Marshal(b, m, deterministic)
}
func (m *MatchedPlayerSession) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchedPlayerSession.Merge(m, src)
}
func (m *MatchedPlayerSession) XXX_Size() int {
	return xxx_messageInfo_MatchedPlayerSession.Size(m)
}
func (m *MatchedPlayerSession) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchedPlayerSession.DiscardUnknown(m)
}

var xxx_messageInfo_MatchedPlayerSession proto.InternalMessageInfo

func (m *MatchedPlayerSession) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *MatchedPlayerSession) GetAgentSvcID() string {
	if m != nil {
		return m.AgentSvcID
	}
	return ""
}

func (m *MatchedPlayerSession) GetAgentSessionID() string {
	if m != nil {
		return m.AgentSessionID
	}
	return ""
}

func (m *MatchedPlayerSession) GetTeam() string {
	if m != nil {
		return m.Team
	}
	return ""
}

//响应StartMatchmaking请求而创建的新游戏会话的连接信息。一旦匹配成功，FlexMatch引擎将为其创建一个新的游戏会话。
//这些信息，包括原始匹配请求中每个玩家的游戏会话端点和玩家会话，被添加到MatchmakingTicket中，
//可以通过调用DescribeMatchmaking检索。
type GameSessionConnectionInfo struct {
	//游戏会话唯一标识
	GameSessionId string `protobuf:"bytes,1,opt,name=GameSessionId,proto3" json:"GameSessionId,omitempty"`
	//对战节点服务唯一标识
	SvcID string `protobuf:"bytes,2,opt,name=SvcID,proto3" json:"SvcID,omitempty"`
	//对战房间ID
	RoomID               int64                   `protobuf:"varint,3,opt,name=RoomID,proto3" json:"RoomID,omitempty"`
	Players              []*MatchedPlayerSession `protobuf:"bytes,4,rep,name=Players,proto3" json:"Players,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *GameSessionConnectionInfo) Reset()         { *m = GameSessionConnectionInfo{} }
func (m *GameSessionConnectionInfo) String() string { return proto.CompactTextString(m) }
func (*GameSessionConnectionInfo) ProtoMessage()    {}
func (*GameSessionConnectionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8708cffbfd778c3, []int{15}
}

func (m *GameSessionConnectionInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameSessionConnectionInfo.Unmarshal(m, b)
}
func (m *GameSessionConnectionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameSessionConnectionInfo.Marshal(b, m, deterministic)
}
func (m *GameSessionConnectionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameSessionConnectionInfo.Merge(m, src)
}
func (m *GameSessionConnectionInfo) XXX_Size() int {
	return xxx_messageInfo_GameSessionConnectionInfo.Size(m)
}
func (m *GameSessionConnectionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GameSessionConnectionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GameSessionConnectionInfo proto.InternalMessageInfo

func (m *GameSessionConnectionInfo) GetGameSessionId() string {
	if m != nil {
		return m.GameSessionId
	}
	return ""
}

func (m *GameSessionConnectionInfo) GetSvcID() string {
	if m != nil {
		return m.SvcID
	}
	return ""
}

func (m *GameSessionConnectionInfo) GetRoomID() int64 {
	if m != nil {
		return m.RoomID
	}
	return 0
}

func (m *GameSessionConnectionInfo) GetPlayers() []*MatchedPlayerSession {
	if m != nil {
		return m.Players
	}
	return nil
}

//描述一个游戏会话的属性。 https://docs.aws.amazon.com/zh_cn/gamelift/latest/apireference/API_GameSession.html
//一个处于活跃状态的游戏会话可以接待玩家。当一个游戏会话结束时，它的状态被设置为终结。
//一旦会话结束，游戏会话对象将保留30天。这意味着你可以在这个时间之后重新使用idempotency令牌值。游戏会话日志会保留14天。
type GameSession struct {
	//游戏会话创建时间
	CreationTime int64 `protobuf:"varint,1,opt,name=CreationTime,proto3" json:"CreationTime,omitempty"`
	//游戏会话玩家数
	CurrentPlayerSessionCount int64 `protobuf:"varint,2,opt,name=CurrentPlayerSessionCount,proto3" json:"CurrentPlayerSessionCount,omitempty"`
	//游戏属性
	GameProperties []*GameProperty `protobuf:"bytes,3,rep,name=GameProperties,proto3" json:"GameProperties,omitempty"`
	//透传字符
	GameSessionData string `protobuf:"bytes,4,opt,name=GameSessionData,proto3" json:"GameSessionData,omitempty"`
	//游戏会话唯一标识    SvcID/RoomId
	GameSessionId string `protobuf:"bytes,5,opt,name=GameSessionId,proto3" json:"GameSessionId,omitempty"`
	//游戏会话描述
	Name string `protobuf:"bytes,6,opt,name=Name,proto3" json:"Name,omitempty"`
	//状态
	Status string `protobuf:"bytes,7,opt,name=Status,proto3" json:"Status,omitempty"`
	//状态原因
	StatusReason string `protobuf:"bytes,8,opt,name=StatusReason,proto3" json:"StatusReason,omitempty"`
	//对局服务器ID, 当游戏希望控制对局的负载均衡时使用
	SvcID string `protobuf:"bytes,9,opt,name=SvcID,proto3" json:"SvcID,omitempty"`
	//对战房间ID
	RoomID               int64    `protobuf:"varint,10,opt,name=RoomID,proto3" json:"RoomID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GameSession) Reset()         { *m = GameSession{} }
func (m *GameSession) String() string { return proto.CompactTextString(m) }
func (*GameSession) ProtoMessage()    {}
func (*GameSession) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8708cffbfd778c3, []int{16}
}

func (m *GameSession) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GameSession.Unmarshal(m, b)
}
func (m *GameSession) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GameSession.Marshal(b, m, deterministic)
}
func (m *GameSession) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameSession.Merge(m, src)
}
func (m *GameSession) XXX_Size() int {
	return xxx_messageInfo_GameSession.Size(m)
}
func (m *GameSession) XXX_DiscardUnknown() {
	xxx_messageInfo_GameSession.DiscardUnknown(m)
}

var xxx_messageInfo_GameSession proto.InternalMessageInfo

func (m *GameSession) GetCreationTime() int64 {
	if m != nil {
		return m.CreationTime
	}
	return 0
}

func (m *GameSession) GetCurrentPlayerSessionCount() int64 {
	if m != nil {
		return m.CurrentPlayerSessionCount
	}
	return 0
}

func (m *GameSession) GetGameProperties() []*GameProperty {
	if m != nil {
		return m.GameProperties
	}
	return nil
}

func (m *GameSession) GetGameSessionData() string {
	if m != nil {
		return m.GameSessionData
	}
	return ""
}

func (m *GameSession) GetGameSessionId() string {
	if m != nil {
		return m.GameSessionId
	}
	return ""
}

func (m *GameSession) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GameSession) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *GameSession) GetStatusReason() string {
	if m != nil {
		return m.StatusReason
	}
	return ""
}

func (m *GameSession) GetSvcID() string {
	if m != nil {
		return m.SvcID
	}
	return ""
}

func (m *GameSession) GetRoomID() int64 {
	if m != nil {
		return m.RoomID
	}
	return 0
}

//匹配票
type MatchmakingTicket struct {
	//票ID
	TicketId string `protobuf:"bytes,1,opt,name=TicketId,proto3" json:"TicketId,omitempty"`
	//开始时间
	StartTime int64 `protobuf:"varint,2,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	//单人或组队玩家信息
	Players []*MatchPlayer `protobuf:"bytes,3,rep,name=Players,proto3" json:"Players,omitempty"`
	//状态 参见MatchmakingTicketStatus定义
	Status string `protobuf:"bytes,4,opt,name=Status,proto3" json:"Status,omitempty"`
	//解释当前状态的代码。例如，一个状态原因可能表明，当一张票在提议的比赛未能收到玩家的接受后，返回到搜索状态。
	StatusReason string `protobuf:"bytes,5,opt,name=StatusReason,proto3" json:"StatusReason,omitempty"`
	//有关当前状态的其他信息。
	StatusMessage string `protobuf:"bytes,6,opt,name=StatusMessage,proto3" json:"StatusMessage,omitempty"`
	//完成时间
	EndTime int64 `protobuf:"varint,7,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	//对战配置的名称
	ConfigurationName string `protobuf:"bytes,8,opt,name=ConfigurationName,proto3" json:"ConfigurationName,omitempty"`
	//预计等待时间（单位秒）
	EstimatedWaitTime int64 `protobuf:"varint,9,opt,name=EstimatedWaitTime,proto3" json:"EstimatedWaitTime,omitempty"`
	//匹配对局唯一ID （辅助字段）
	MatchId string `protobuf:"bytes,10,opt,name=MatchId,proto3" json:"MatchId,omitempty"`
	//接收到取消请求 （延迟取消辅助字段）
	CancelRequest bool `protobuf:"varint,11,opt,name=CancelRequest,proto3" json:"CancelRequest,omitempty"`
	//完成潜在对局匹配的耗时（单位秒）
	PotentialMatchCostSeconds int64 `protobuf:"varint,12,opt,name=PotentialMatchCostSeconds,proto3" json:"PotentialMatchCostSeconds,omitempty"`
	//游戏对局会话连接信息
	GameSessionInfo      *GameSessionConnectionInfo `protobuf:"bytes,13,opt,name=GameSessionInfo,proto3" json:"GameSessionInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *MatchmakingTicket) Reset()         { *m = MatchmakingTicket{} }
func (m *MatchmakingTicket) String() string { return proto.CompactTextString(m) }
func (*MatchmakingTicket) ProtoMessage()    {}
func (*MatchmakingTicket) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8708cffbfd778c3, []int{17}
}

func (m *MatchmakingTicket) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MatchmakingTicket.Unmarshal(m, b)
}
func (m *MatchmakingTicket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MatchmakingTicket.Marshal(b, m, deterministic)
}
func (m *MatchmakingTicket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchmakingTicket.Merge(m, src)
}
func (m *MatchmakingTicket) XXX_Size() int {
	return xxx_messageInfo_MatchmakingTicket.Size(m)
}
func (m *MatchmakingTicket) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchmakingTicket.DiscardUnknown(m)
}

var xxx_messageInfo_MatchmakingTicket proto.InternalMessageInfo

func (m *MatchmakingTicket) GetTicketId() string {
	if m != nil {
		return m.TicketId
	}
	return ""
}

func (m *MatchmakingTicket) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *MatchmakingTicket) GetPlayers() []*MatchPlayer {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *MatchmakingTicket) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *MatchmakingTicket) GetStatusReason() string {
	if m != nil {
		return m.StatusReason
	}
	return ""
}

func (m *MatchmakingTicket) GetStatusMessage() string {
	if m != nil {
		return m.StatusMessage
	}
	return ""
}

func (m *MatchmakingTicket) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *MatchmakingTicket) GetConfigurationName() string {
	if m != nil {
		return m.ConfigurationName
	}
	return ""
}

func (m *MatchmakingTicket) GetEstimatedWaitTime() int64 {
	if m != nil {
		return m.EstimatedWaitTime
	}
	return 0
}

func (m *MatchmakingTicket) GetMatchId() string {
	if m != nil {
		return m.MatchId
	}
	return ""
}

func (m *MatchmakingTicket) GetCancelRequest() bool {
	if m != nil {
		return m.CancelRequest
	}
	return false
}

func (m *MatchmakingTicket) GetPotentialMatchCostSeconds() int64 {
	if m != nil {
		return m.PotentialMatchCostSeconds
	}
	return 0
}

func (m *MatchmakingTicket) GetGameSessionInfo() *GameSessionConnectionInfo {
	if m != nil {
		return m.GameSessionInfo
	}
	return nil
}

//玩家对局结果
type PlayerBattleResult struct {
	UserId               int64    `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	GainScore            float64  `protobuf:"fixed64,2,opt,name=GainScore,proto3" json:"GainScore,omitempty"`
	GainExpectScore      float64  `protobuf:"fixed64,3,opt,name=GainExpectScore,proto3" json:"GainExpectScore,omitempty"`
	Diff                 float64  `protobuf:"fixed64,4,opt,name=Diff,proto3" json:"Diff,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerBattleResult) Reset()         { *m = PlayerBattleResult{} }
func (m *PlayerBattleResult) String() string { return proto.CompactTextString(m) }
func (*PlayerBattleResult) ProtoMessage()    {}
func (*PlayerBattleResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8708cffbfd778c3, []int{18}
}

func (m *PlayerBattleResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayerBattleResult.Unmarshal(m, b)
}
func (m *PlayerBattleResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayerBattleResult.Marshal(b, m, deterministic)
}
func (m *PlayerBattleResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerBattleResult.Merge(m, src)
}
func (m *PlayerBattleResult) XXX_Size() int {
	return xxx_messageInfo_PlayerBattleResult.Size(m)
}
func (m *PlayerBattleResult) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerBattleResult.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerBattleResult proto.InternalMessageInfo

func (m *PlayerBattleResult) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *PlayerBattleResult) GetGainScore() float64 {
	if m != nil {
		return m.GainScore
	}
	return 0
}

func (m *PlayerBattleResult) GetGainExpectScore() float64 {
	if m != nil {
		return m.GainExpectScore
	}
	return 0
}

func (m *PlayerBattleResult) GetDiff() float64 {
	if m != nil {
		return m.Diff
	}
	return 0
}

type PlayerBattleRecordList struct {
	RecordList           []*PlayerBattleResult `protobuf:"bytes,1,rep,name=RecordList,proto3" json:"RecordList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *PlayerBattleRecordList) Reset()         { *m = PlayerBattleRecordList{} }
func (m *PlayerBattleRecordList) String() string { return proto.CompactTextString(m) }
func (*PlayerBattleRecordList) ProtoMessage()    {}
func (*PlayerBattleRecordList) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8708cffbfd778c3, []int{19}
}

func (m *PlayerBattleRecordList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayerBattleRecordList.Unmarshal(m, b)
}
func (m *PlayerBattleRecordList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayerBattleRecordList.Marshal(b, m, deterministic)
}
func (m *PlayerBattleRecordList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerBattleRecordList.Merge(m, src)
}
func (m *PlayerBattleRecordList) XXX_Size() int {
	return xxx_messageInfo_PlayerBattleRecordList.Size(m)
}
func (m *PlayerBattleRecordList) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerBattleRecordList.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerBattleRecordList proto.InternalMessageInfo

func (m *PlayerBattleRecordList) GetRecordList() []*PlayerBattleResult {
	if m != nil {
		return m.RecordList
	}
	return nil
}

//玩家战力相关信息
type MatchPlayer struct {
	UserId   int64 `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Accepted bool  `protobuf:"varint,2,opt,name=Accepted,proto3" json:"Accepted,omitempty"`
	//玩家属性
	Attributes           []*PlayerAttribute `protobuf:"bytes,3,rep,name=Attributes,proto3" json:"Attributes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *MatchPlayer) Reset()         { *m = MatchPlayer{} }
func (m *MatchPlayer) String() string { return proto.CompactTextString(m) }
func (*MatchPlayer) ProtoMessage()    {}
func (*MatchPlayer) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8708cffbfd778c3, []int{20}
}

func (m *MatchPlayer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MatchPlayer.Unmarshal(m, b)
}
func (m *MatchPlayer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MatchPlayer.Marshal(b, m, deterministic)
}
func (m *MatchPlayer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchPlayer.Merge(m, src)
}
func (m *MatchPlayer) XXX_Size() int {
	return xxx_messageInfo_MatchPlayer.Size(m)
}
func (m *MatchPlayer) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchPlayer.DiscardUnknown(m)
}

var xxx_messageInfo_MatchPlayer proto.InternalMessageInfo

func (m *MatchPlayer) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *MatchPlayer) GetAccepted() bool {
	if m != nil {
		return m.Accepted
	}
	return false
}

func (m *MatchPlayer) GetAttributes() []*PlayerAttribute {
	if m != nil {
		return m.Attributes
	}
	return nil
}

//对局结果
type BattleResult struct {
	PlayerList           []*MatchPlayer `protobuf:"bytes,1,rep,name=PlayerList,proto3" json:"PlayerList,omitempty"`
	WinCamp              string         `protobuf:"bytes,3,opt,name=WinCamp,proto3" json:"WinCamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *BattleResult) Reset()         { *m = BattleResult{} }
func (m *BattleResult) String() string { return proto.CompactTextString(m) }
func (*BattleResult) ProtoMessage()    {}
func (*BattleResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8708cffbfd778c3, []int{21}
}

func (m *BattleResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BattleResult.Unmarshal(m, b)
}
func (m *BattleResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BattleResult.Marshal(b, m, deterministic)
}
func (m *BattleResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BattleResult.Merge(m, src)
}
func (m *BattleResult) XXX_Size() int {
	return xxx_messageInfo_BattleResult.Size(m)
}
func (m *BattleResult) XXX_DiscardUnknown() {
	xxx_messageInfo_BattleResult.DiscardUnknown(m)
}

var xxx_messageInfo_BattleResult proto.InternalMessageInfo

func (m *BattleResult) GetPlayerList() []*MatchPlayer {
	if m != nil {
		return m.PlayerList
	}
	return nil
}

func (m *BattleResult) GetWinCamp() string {
	if m != nil {
		return m.WinCamp
	}
	return ""
}

//战斗结果
type BattleResultRequest struct {
	Key                  string        `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Result               *BattleResult `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *BattleResultRequest) Reset()         { *m = BattleResultRequest{} }
func (m *BattleResultRequest) String() string { return proto.CompactTextString(m) }
func (*BattleResultRequest) ProtoMessage()    {}
func (*BattleResultRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8708cffbfd778c3, []int{22}
}

func (m *BattleResultRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BattleResultRequest.Unmarshal(m, b)
}
func (m *BattleResultRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BattleResultRequest.Marshal(b, m, deterministic)
}
func (m *BattleResultRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BattleResultRequest.Merge(m, src)
}
func (m *BattleResultRequest) XXX_Size() int {
	return xxx_messageInfo_BattleResultRequest.Size(m)
}
func (m *BattleResultRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BattleResultRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BattleResultRequest proto.InternalMessageInfo

func (m *BattleResultRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *BattleResultRequest) GetResult() *BattleResult {
	if m != nil {
		return m.Result
	}
	return nil
}

type BattleResultResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BattleResultResponse) Reset()         { *m = BattleResultResponse{} }
func (m *BattleResultResponse) String() string { return proto.CompactTextString(m) }
func (*BattleResultResponse) ProtoMessage()    {}
func (*BattleResultResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8708cffbfd778c3, []int{23}
}

func (m *BattleResultResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BattleResultResponse.Unmarshal(m, b)
}
func (m *BattleResultResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BattleResultResponse.Marshal(b, m, deterministic)
}
func (m *BattleResultResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BattleResultResponse.Merge(m, src)
}
func (m *BattleResultResponse) XXX_Size() int {
	return xxx_messageInfo_BattleResultResponse.Size(m)
}
func (m *BattleResultResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BattleResultResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BattleResultResponse proto.InternalMessageInfo

type CreateMatchmakingConfigurationRequest struct {
	//媒人配置
	Configuration        *MatchmakingConfiguration `protobuf:"bytes,1,opt,name=Configuration,proto3" json:"Configuration,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *CreateMatchmakingConfigurationRequest) Reset()         { *m = CreateMatchmakingConfigurationRequest{} }
func (m *CreateMatchmakingConfigurationRequest) String() string { return proto.CompactTextString(m) }
func (*CreateMatchmakingConfigurationRequest) ProtoMessage()    {}
func (*CreateMatchmakingConfigurationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8708cffbfd778c3, []int{24}
}

func (m *CreateMatchmakingConfigurationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateMatchmakingConfigurationRequest.Unmarshal(m, b)
}
func (m *CreateMatchmakingConfigurationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateMatchmakingConfigurationRequest.Marshal(b, m, deterministic)
}
func (m *CreateMatchmakingConfigurationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateMatchmakingConfigurationRequest.Merge(m, src)
}
func (m *CreateMatchmakingConfigurationRequest) XXX_Size() int {
	return xxx_messageInfo_CreateMatchmakingConfigurationRequest.Size(m)
}
func (m *CreateMatchmakingConfigurationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateMatchmakingConfigurationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateMatchmakingConfigurationRequest proto.InternalMessageInfo

func (m *CreateMatchmakingConfigurationRequest) GetConfiguration() *MatchmakingConfiguration {
	if m != nil {
		return m.Configuration
	}
	return nil
}

type CreateMatchmakingConfigurationResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateMatchmakingConfigurationResponse) Reset() {
	*m = CreateMatchmakingConfigurationResponse{}
}
func (m *CreateMatchmakingConfigurationResponse) String() string { return proto.CompactTextString(m) }
func (*CreateMatchmakingConfigurationResponse) ProtoMessage()    {}
func (*CreateMatchmakingConfigurationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8708cffbfd778c3, []int{25}
}

func (m *CreateMatchmakingConfigurationResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateMatchmakingConfigurationResponse.Unmarshal(m, b)
}
func (m *CreateMatchmakingConfigurationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateMatchmakingConfigurationResponse.Marshal(b, m, deterministic)
}
func (m *CreateMatchmakingConfigurationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateMatchmakingConfigurationResponse.Merge(m, src)
}
func (m *CreateMatchmakingConfigurationResponse) XXX_Size() int {
	return xxx_messageInfo_CreateMatchmakingConfigurationResponse.Size(m)
}
func (m *CreateMatchmakingConfigurationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateMatchmakingConfigurationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateMatchmakingConfigurationResponse proto.InternalMessageInfo

//检索对战配置
type DescribeMatchmakingConfigurationRequest struct {
	ConfigurationName    string   `protobuf:"bytes,1,opt,name=ConfigurationName,proto3" json:"ConfigurationName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DescribeMatchmakingConfigurationRequest) Reset() {
	*m = DescribeMatchmakingConfigurationRequest{}
}
func (m *DescribeMatchmakingConfigurationRequest) String() string { return proto.CompactTextString(m) }
func (*DescribeMatchmakingConfigurationRequest) ProtoMessage()    {}
func (*DescribeMatchmakingConfigurationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8708cffbfd778c3, []int{26}
}

func (m *DescribeMatchmakingConfigurationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DescribeMatchmakingConfigurationRequest.Unmarshal(m, b)
}
func (m *DescribeMatchmakingConfigurationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DescribeMatchmakingConfigurationRequest.Marshal(b, m, deterministic)
}
func (m *DescribeMatchmakingConfigurationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DescribeMatchmakingConfigurationRequest.Merge(m, src)
}
func (m *DescribeMatchmakingConfigurationRequest) XXX_Size() int {
	return xxx_messageInfo_DescribeMatchmakingConfigurationRequest.Size(m)
}
func (m *DescribeMatchmakingConfigurationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DescribeMatchmakingConfigurationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DescribeMatchmakingConfigurationRequest proto.InternalMessageInfo

func (m *DescribeMatchmakingConfigurationRequest) GetConfigurationName() string {
	if m != nil {
		return m.ConfigurationName
	}
	return ""
}

//检索对战配置
type DescribeMatchmakingConfigurationResponse struct {
	Configuartion        *MatchmakingConfiguration `protobuf:"bytes,1,opt,name=Configuartion,proto3" json:"Configuartion,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *DescribeMatchmakingConfigurationResponse) Reset() {
	*m = DescribeMatchmakingConfigurationResponse{}
}
func (m *DescribeMatchmakingConfigurationResponse) String() string { return proto.CompactTextString(m) }
func (*DescribeMatchmakingConfigurationResponse) ProtoMessage()    {}
func (*DescribeMatchmakingConfigurationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8708cffbfd778c3, []int{27}
}

func (m *DescribeMatchmakingConfigurationResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DescribeMatchmakingConfigurationResponse.Unmarshal(m, b)
}
func (m *DescribeMatchmakingConfigurationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DescribeMatchmakingConfigurationResponse.Marshal(b, m, deterministic)
}
func (m *DescribeMatchmakingConfigurationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DescribeMatchmakingConfigurationResponse.Merge(m, src)
}
func (m *DescribeMatchmakingConfigurationResponse) XXX_Size() int {
	return xxx_messageInfo_DescribeMatchmakingConfigurationResponse.Size(m)
}
func (m *DescribeMatchmakingConfigurationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DescribeMatchmakingConfigurationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DescribeMatchmakingConfigurationResponse proto.InternalMessageInfo

func (m *DescribeMatchmakingConfigurationResponse) GetConfiguartion() *MatchmakingConfiguration {
	if m != nil {
		return m.Configuartion
	}
	return nil
}

//创建对战请求
type StartMatchmakingRequest struct {
	//要用于请求的对战配置的名称
	ConfigurationName string `protobuf:"bytes,1,opt,name=ConfigurationName,proto3" json:"ConfigurationName,omitempty"`
	//票ID
	TicketId string `protobuf:"bytes,2,opt,name=TicketId,proto3" json:"TicketId,omitempty"`
	//单人或组队玩家信息
	Players              []*MatchPlayer `protobuf:"bytes,3,rep,name=Players,proto3" json:"Players,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *StartMatchmakingRequest) Reset()         { *m = StartMatchmakingRequest{} }
func (m *StartMatchmakingRequest) String() string { return proto.CompactTextString(m) }
func (*StartMatchmakingRequest) ProtoMessage()    {}
func (*StartMatchmakingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8708cffbfd778c3, []int{28}
}

func (m *StartMatchmakingRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartMatchmakingRequest.Unmarshal(m, b)
}
func (m *StartMatchmakingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartMatchmakingRequest.Marshal(b, m, deterministic)
}
func (m *StartMatchmakingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartMatchmakingRequest.Merge(m, src)
}
func (m *StartMatchmakingRequest) XXX_Size() int {
	return xxx_messageInfo_StartMatchmakingRequest.Size(m)
}
func (m *StartMatchmakingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StartMatchmakingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StartMatchmakingRequest proto.InternalMessageInfo

func (m *StartMatchmakingRequest) GetConfigurationName() string {
	if m != nil {
		return m.ConfigurationName
	}
	return ""
}

func (m *StartMatchmakingRequest) GetTicketId() string {
	if m != nil {
		return m.TicketId
	}
	return ""
}

func (m *StartMatchmakingRequest) GetPlayers() []*MatchPlayer {
	if m != nil {
		return m.Players
	}
	return nil
}

//创建对战响应
type StartMatchmakingResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartMatchmakingResponse) Reset()         { *m = StartMatchmakingResponse{} }
func (m *StartMatchmakingResponse) String() string { return proto.CompactTextString(m) }
func (*StartMatchmakingResponse) ProtoMessage()    {}
func (*StartMatchmakingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8708cffbfd778c3, []int{29}
}

func (m *StartMatchmakingResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartMatchmakingResponse.Unmarshal(m, b)
}
func (m *StartMatchmakingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartMatchmakingResponse.Marshal(b, m, deterministic)
}
func (m *StartMatchmakingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartMatchmakingResponse.Merge(m, src)
}
func (m *StartMatchmakingResponse) XXX_Size() int {
	return xxx_messageInfo_StartMatchmakingResponse.Size(m)
}
func (m *StartMatchmakingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StartMatchmakingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StartMatchmakingResponse proto.InternalMessageInfo

//检索对战请求详细信息
type DescribeMatchmakingRequest struct {
	//票证ID
	TicketIds            []string `protobuf:"bytes,1,rep,name=TicketIds,proto3" json:"TicketIds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DescribeMatchmakingRequest) Reset()         { *m = DescribeMatchmakingRequest{} }
func (m *DescribeMatchmakingRequest) String() string { return proto.CompactTextString(m) }
func (*DescribeMatchmakingRequest) ProtoMessage()    {}
func (*DescribeMatchmakingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8708cffbfd778c3, []int{30}
}

func (m *DescribeMatchmakingRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DescribeMatchmakingRequest.Unmarshal(m, b)
}
func (m *DescribeMatchmakingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DescribeMatchmakingRequest.Marshal(b, m, deterministic)
}
func (m *DescribeMatchmakingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DescribeMatchmakingRequest.Merge(m, src)
}
func (m *DescribeMatchmakingRequest) XXX_Size() int {
	return xxx_messageInfo_DescribeMatchmakingRequest.Size(m)
}
func (m *DescribeMatchmakingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DescribeMatchmakingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DescribeMatchmakingRequest proto.InternalMessageInfo

func (m *DescribeMatchmakingRequest) GetTicketIds() []string {
	if m != nil {
		return m.TicketIds
	}
	return nil
}

//检索对战请求详细信息
type DescribeMatchmakingResponse struct {
	TicketList           []*MatchmakingTicket `protobuf:"bytes,2,rep,name=TicketList,proto3" json:"TicketList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *DescribeMatchmakingResponse) Reset()         { *m = DescribeMatchmakingResponse{} }
func (m *DescribeMatchmakingResponse) String() string { return proto.CompactTextString(m) }
func (*DescribeMatchmakingResponse) ProtoMessage()    {}
func (*DescribeMatchmakingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8708cffbfd778c3, []int{31}
}

func (m *DescribeMatchmakingResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DescribeMatchmakingResponse.Unmarshal(m, b)
}
func (m *DescribeMatchmakingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DescribeMatchmakingResponse.Marshal(b, m, deterministic)
}
func (m *DescribeMatchmakingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DescribeMatchmakingResponse.Merge(m, src)
}
func (m *DescribeMatchmakingResponse) XXX_Size() int {
	return xxx_messageInfo_DescribeMatchmakingResponse.Size(m)
}
func (m *DescribeMatchmakingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DescribeMatchmakingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DescribeMatchmakingResponse proto.InternalMessageInfo

func (m *DescribeMatchmakingResponse) GetTicketList() []*MatchmakingTicket {
	if m != nil {
		return m.TicketList
	}
	return nil
}

//取消对战请求 不需要对局配置名, 难道是因为TicketId在所有匹配池均唯一，而且需要持久化，或者票据和服务节点的映射关系交于游戏服务器维护
// 每个匹配rpc服务带有SvcID, 游戏初始为票据分配节点后，后续该票据请求仍请求该节点。匹配服务节点只是需要通过票据ID获取媒介
type StopMatchmakingRequest struct {
	//票证ID
	TicketId             string   `protobuf:"bytes,1,opt,name=TicketId,proto3" json:"TicketId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StopMatchmakingRequest) Reset()         { *m = StopMatchmakingRequest{} }
func (m *StopMatchmakingRequest) String() string { return proto.CompactTextString(m) }
func (*StopMatchmakingRequest) ProtoMessage()    {}
func (*StopMatchmakingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8708cffbfd778c3, []int{32}
}

func (m *StopMatchmakingRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StopMatchmakingRequest.Unmarshal(m, b)
}
func (m *StopMatchmakingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StopMatchmakingRequest.Marshal(b, m, deterministic)
}
func (m *StopMatchmakingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopMatchmakingRequest.Merge(m, src)
}
func (m *StopMatchmakingRequest) XXX_Size() int {
	return xxx_messageInfo_StopMatchmakingRequest.Size(m)
}
func (m *StopMatchmakingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StopMatchmakingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StopMatchmakingRequest proto.InternalMessageInfo

func (m *StopMatchmakingRequest) GetTicketId() string {
	if m != nil {
		return m.TicketId
	}
	return ""
}

//取消对战响应
type StopMatchmakingResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StopMatchmakingResponse) Reset()         { *m = StopMatchmakingResponse{} }
func (m *StopMatchmakingResponse) String() string { return proto.CompactTextString(m) }
func (*StopMatchmakingResponse) ProtoMessage()    {}
func (*StopMatchmakingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8708cffbfd778c3, []int{33}
}

func (m *StopMatchmakingResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StopMatchmakingResponse.Unmarshal(m, b)
}
func (m *StopMatchmakingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StopMatchmakingResponse.Marshal(b, m, deterministic)
}
func (m *StopMatchmakingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopMatchmakingResponse.Merge(m, src)
}
func (m *StopMatchmakingResponse) XXX_Size() int {
	return xxx_messageInfo_StopMatchmakingResponse.Size(m)
}
func (m *StopMatchmakingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StopMatchmakingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StopMatchmakingResponse proto.InternalMessageInfo

//接受匹配
type AcceptMatchRequest struct {
	//要用于请求的对战配置的名称
	ConfigurationName string `protobuf:"bytes,1,opt,name=ConfigurationName,proto3" json:"ConfigurationName,omitempty"`
	// 玩家对潜在匹配的响应 ACCEPT-接受, REJECT-拒绝
	AcceptanceType AcceptanceType `protobuf:"varint,2,opt,name=AcceptanceType,proto3,enum=open.AcceptanceType" json:"AcceptanceType,omitempty"`
	//玩家ID
	PlayerIds []int64 `protobuf:"varint,3,rep,packed,name=PlayerIds,proto3" json:"PlayerIds,omitempty"`
	//票据ID
	TicketId             string   `protobuf:"bytes,4,opt,name=TicketId,proto3" json:"TicketId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AcceptMatchRequest) Reset()         { *m = AcceptMatchRequest{} }
func (m *AcceptMatchRequest) String() string { return proto.CompactTextString(m) }
func (*AcceptMatchRequest) ProtoMessage()    {}
func (*AcceptMatchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8708cffbfd778c3, []int{34}
}

func (m *AcceptMatchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AcceptMatchRequest.Unmarshal(m, b)
}
func (m *AcceptMatchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AcceptMatchRequest.Marshal(b, m, deterministic)
}
func (m *AcceptMatchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AcceptMatchRequest.Merge(m, src)
}
func (m *AcceptMatchRequest) XXX_Size() int {
	return xxx_messageInfo_AcceptMatchRequest.Size(m)
}
func (m *AcceptMatchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AcceptMatchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AcceptMatchRequest proto.InternalMessageInfo

func (m *AcceptMatchRequest) GetConfigurationName() string {
	if m != nil {
		return m.ConfigurationName
	}
	return ""
}

func (m *AcceptMatchRequest) GetAcceptanceType() AcceptanceType {
	if m != nil {
		return m.AcceptanceType
	}
	return AcceptanceType_UNKNOWN
}

func (m *AcceptMatchRequest) GetPlayerIds() []int64 {
	if m != nil {
		return m.PlayerIds
	}
	return nil
}

func (m *AcceptMatchRequest) GetTicketId() string {
	if m != nil {
		return m.TicketId
	}
	return ""
}

//接受匹配响应
type AcceptMatchResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AcceptMatchResponse) Reset()         { *m = AcceptMatchResponse{} }
func (m *AcceptMatchResponse) String() string { return proto.CompactTextString(m) }
func (*AcceptMatchResponse) ProtoMessage()    {}
func (*AcceptMatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8708cffbfd778c3, []int{35}
}

func (m *AcceptMatchResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AcceptMatchResponse.Unmarshal(m, b)
}
func (m *AcceptMatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AcceptMatchResponse.Marshal(b, m, deterministic)
}
func (m *AcceptMatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AcceptMatchResponse.Merge(m, src)
}
func (m *AcceptMatchResponse) XXX_Size() int {
	return xxx_messageInfo_AcceptMatchResponse.Size(m)
}
func (m *AcceptMatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AcceptMatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AcceptMatchResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("open.BackfillMode", BackfillMode_name, BackfillMode_value)
	proto.RegisterEnum("open.MatchmakingRuleType", MatchmakingRuleType_name, MatchmakingRuleType_value)
	proto.RegisterEnum("open.SortDirectionType", SortDirectionType_name, SortDirectionType_value)
	proto.RegisterEnum("open.ComponentType", ComponentType_name, ComponentType_value)
	proto.RegisterEnum("open.MatchEventType", MatchEventType_name, MatchEventType_value)
	proto.RegisterEnum("open.MatchmakingTicketStatus", MatchmakingTicketStatus_name, MatchmakingTicketStatus_value)
	proto.RegisterEnum("open.AcceptanceType", AcceptanceType_name, AcceptanceType_value)
	proto.RegisterType((*CreateGameSessionRequest)(nil), "open.CreateGameSessionRequest")
	proto.RegisterType((*CreateGameSessionResponse)(nil), "open.CreateGameSessionResponse")
	proto.RegisterType((*GameProperty)(nil), "open.GameProperty")
	proto.RegisterType((*MatchmakingConfiguration)(nil), "open.MatchmakingConfiguration")
	proto.RegisterType((*PlayerAttribute)(nil), "open.PlayerAttribute")
	proto.RegisterType((*MatchmakingRuleAlgorithm)(nil), "open.MatchmakingRuleAlgorithm")
	proto.RegisterType((*MatchmakingRule)(nil), "open.MatchmakingRule")
	proto.RegisterType((*MatchmakingTeamConfiguration)(nil), "open.MatchmakingTeamConfiguration")
	proto.RegisterType((*MatchTeam)(nil), "open.MatchTeam")
	proto.RegisterType((*MatchmakingExpansionRuleTarget)(nil), "open.MatchmakingExpansionRuleTarget")
	proto.RegisterType((*MatchmakingExpansionRuleStep)(nil), "open.MatchmakingExpansionRuleStep")
	proto.RegisterType((*MatchmakingExpansionRule)(nil), "open.MatchmakingExpansionRule")
	proto.RegisterType((*MatchmakingRuleSet)(nil), "open.MatchmakingRuleSet")
	proto.RegisterType((*MatchEvent)(nil), "open.MatchEvent")
	proto.RegisterType((*MatchedPlayerSession)(nil), "open.MatchedPlayerSession")
	proto.RegisterType((*GameSessionConnectionInfo)(nil), "open.GameSessionConnectionInfo")
	proto.RegisterType((*GameSession)(nil), "open.GameSession")
	proto.RegisterType((*MatchmakingTicket)(nil), "open.MatchmakingTicket")
	proto.RegisterType((*PlayerBattleResult)(nil), "open.PlayerBattleResult")
	proto.RegisterType((*PlayerBattleRecordList)(nil), "open.PlayerBattleRecordList")
	proto.RegisterType((*MatchPlayer)(nil), "open.MatchPlayer")
	proto.RegisterType((*BattleResult)(nil), "open.BattleResult")
	proto.RegisterType((*BattleResultRequest)(nil), "open.BattleResultRequest")
	proto.RegisterType((*BattleResultResponse)(nil), "open.BattleResultResponse")
	proto.RegisterType((*CreateMatchmakingConfigurationRequest)(nil), "open.CreateMatchmakingConfigurationRequest")
	proto.RegisterType((*CreateMatchmakingConfigurationResponse)(nil), "open.CreateMatchmakingConfigurationResponse")
	proto.RegisterType((*DescribeMatchmakingConfigurationRequest)(nil), "open.DescribeMatchmakingConfigurationRequest")
	proto.RegisterType((*DescribeMatchmakingConfigurationResponse)(nil), "open.DescribeMatchmakingConfigurationResponse")
	proto.RegisterType((*StartMatchmakingRequest)(nil), "open.StartMatchmakingRequest")
	proto.RegisterType((*StartMatchmakingResponse)(nil), "open.StartMatchmakingResponse")
	proto.RegisterType((*DescribeMatchmakingRequest)(nil), "open.DescribeMatchmakingRequest")
	proto.RegisterType((*DescribeMatchmakingResponse)(nil), "open.DescribeMatchmakingResponse")
	proto.RegisterType((*StopMatchmakingRequest)(nil), "open.StopMatchmakingRequest")
	proto.RegisterType((*StopMatchmakingResponse)(nil), "open.StopMatchmakingResponse")
	proto.RegisterType((*AcceptMatchRequest)(nil), "open.AcceptMatchRequest")
	proto.RegisterType((*AcceptMatchResponse)(nil), "open.AcceptMatchResponse")
}

func init() { proto.RegisterFile("match_rpc_service.proto", fileDescriptor_f8708cffbfd778c3) }

var fileDescriptor_f8708cffbfd778c3 = []byte{
	// 2373 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x59, 0x4b, 0x73, 0x1c, 0x49,
	0x11, 0x56, 0xcf, 0x4b, 0x9a, 0x94, 0x2c, 0xb5, 0x4a, 0xb6, 0xd4, 0x9a, 0xf5, 0xda, 0xda, 0x0e,
	0xef, 0x22, 0xe4, 0x5d, 0x05, 0xab, 0xf5, 0x9a, 0xc5, 0x21, 0x88, 0x18, 0xcf, 0x8c, 0x8d, 0x58,
	0x3d, 0xc6, 0x35, 0x23, 0xfb, 0x00, 0x81, 0xa2, 0xd5, 0x53, 0x9a, 0xed, 0xf0, 0x4c, 0xf7, 0xd0,
	0x5d, 0x63, 0xa4, 0x03, 0x27, 0x2e, 0x04, 0x27, 0x22, 0xf6, 0xc8, 0x81, 0x08, 0x22, 0xf8, 0x13,
	0xc0, 0x2f, 0xe0, 0xc4, 0x9d, 0x1b, 0x57, 0x7e, 0x01, 0x37, 0xa2, 0x1e, 0xdd, 0x53, 0xd5, 0x0f,
	0xc9, 0x68, 0x6f, 0x5d, 0x99, 0x5f, 0x65, 0x65, 0x66, 0x65, 0x65, 0x66, 0x55, 0xc3, 0xc6, 0xd8,
	0xa1, 0xee, 0x37, 0x67, 0xe1, 0xc4, 0x3d, 0x8b, 0x48, 0xf8, 0xce, 0x73, 0xc9, 0xee, 0x24, 0x0c,
	0x68, 0x80, 0x2a, 0xc1, 0x84, 0xf8, 0xf6, 0x9f, 0x4b, 0x60, 0xb5, 0x42, 0xe2, 0x50, 0xf2, 0xd2,
	0x19, 0x93, 0x1e, 0x89, 0x22, 0x2f, 0xf0, 0x31, 0xf9, 0xd5, 0x94, 0x44, 0x14, 0xed, 0xc3, 0xe6,
	0x91, 0x73, 0xe9, 0x8d, 0xa7, 0xe3, 0xee, 0xc8, 0xb9, 0x22, 0xa1, 0x64, 0xb7, 0x82, 0xa9, 0x4f,
	0x2d, 0x63, 0xcb, 0xd8, 0xae, 0xe2, 0x62, 0x00, 0x7a, 0x06, 0xcb, 0x4c, 0x66, 0x37, 0x0c, 0x26,
	0x24, 0xa4, 0x1e, 0x89, 0xac, 0xd2, 0x56, 0x79, 0x7b, 0x71, 0x0f, 0xed, 0xb2, 0x95, 0x77, 0x15,
	0xde, 0x15, 0x4e, 0x21, 0xd1, 0x36, 0xac, 0x28, 0xfa, 0xb4, 0x1d, 0xea, 0x58, 0xe5, 0x2d, 0x63,
	0xbb, 0x8e, 0xd3, 0x64, 0x64, 0xc1, 0xfc, 0x11, 0xb3, 0xf0, 0x60, 0x60, 0x55, 0x38, 0x22, 0x1e,
	0x22, 0x04, 0x95, 0x63, 0x67, 0x4c, 0xac, 0x2a, 0x27, 0xf3, 0x6f, 0xf4, 0x04, 0xe6, 0x85, 0xa6,
	0x91, 0x55, 0xe3, 0xca, 0x34, 0x84, 0x32, 0x7c, 0x0e, 0x19, 0x68, 0x56, 0xe0, 0x18, 0x6a, 0x77,
	0x61, 0x33, 0xc7, 0x47, 0xd1, 0x24, 0xf0, 0x23, 0x82, 0xbe, 0x80, 0x45, 0x85, 0xcc, 0xdd, 0xb2,
	0xb8, 0xb7, 0x3a, 0xb3, 0x31, 0xc6, 0xab, 0x28, 0xfb, 0x29, 0x2c, 0xa9, 0xf6, 0x23, 0x13, 0xca,
	0x5f, 0x93, 0x2b, 0x3e, 0xb9, 0x8e, 0xd9, 0x27, 0xba, 0x0b, 0xd5, 0xd7, 0xce, 0x68, 0x4a, 0xac,
	0x12, 0xa7, 0x89, 0x81, 0xfd, 0xcf, 0x0a, 0x58, 0x5c, 0xd7, 0xb1, 0xf3, 0xd6, 0xf3, 0x87, 0xad,
	0xc0, 0xbf, 0xf0, 0x86, 0xd3, 0xd0, 0xa1, 0x5e, 0xe0, 0xa3, 0x5d, 0x40, 0x4d, 0xd7, 0x25, 0x13,
	0xea, 0xf8, 0x2e, 0x61, 0x7b, 0xe8, 0x85, 0x64, 0xc0, 0x65, 0x2e, 0xe0, 0x1c, 0x0e, 0x7a, 0x06,
	0xd6, 0x8c, 0xda, 0xf7, 0xc6, 0x24, 0x98, 0xd2, 0x1e, 0x71, 0x03, 0x7f, 0x10, 0xf1, 0x55, 0xcb,
	0xb8, 0x90, 0x8f, 0x6c, 0x58, 0x7a, 0xee, 0xb8, 0x6f, 0x2f, 0xbc, 0xd1, 0xe8, 0x28, 0x18, 0x10,
	0xe9, 0x7b, 0x8d, 0x86, 0xb6, 0x60, 0xb1, 0x4d, 0x22, 0x37, 0xf4, 0x26, 0x4c, 0x3d, 0x6b, 0x81,
	0x43, 0x54, 0x12, 0x7a, 0x04, 0x77, 0x5e, 0x8c, 0xc8, 0x25, 0xb7, 0x88, 0x8b, 0xa9, 0x73, 0x8c,
	0x4e, 0xcc, 0x09, 0x24, 0xf8, 0x2e, 0x81, 0xb4, 0x98, 0x1f, 0x48, 0x71, 0xb8, 0xdc, 0x51, 0xc2,
	0x65, 0x17, 0xd0, 0x71, 0x40, 0xbd, 0x0b, 0xcf, 0xe5, 0x1e, 0xee, 0x3b, 0xe1, 0x90, 0x50, 0x6b,
	0x99, 0x23, 0x72, 0x38, 0xe8, 0x09, 0xdc, 0x93, 0x67, 0x27, 0xe5, 0xce, 0x15, 0xee, 0xce, 0x7c,
	0x26, 0xda, 0x83, 0x79, 0x3c, 0x1d, 0x91, 0x1e, 0xa1, 0x96, 0xc9, 0xa3, 0xc7, 0x52, 0x82, 0x52,
	0x6c, 0xb4, 0xe4, 0xe3, 0x18, 0x88, 0xf6, 0xe0, 0x2e, 0x67, 0x77, 0xde, 0x11, 0x9f, 0xbe, 0x9a,
	0x92, 0x29, 0xe9, 0x07, 0x13, 0xcf, 0xb5, 0x56, 0xb9, 0x6e, 0xb9, 0x3c, 0x16, 0x52, 0x6d, 0x72,
	0x3e, 0x1d, 0x5a, 0x88, 0x87, 0x84, 0x18, 0xd8, 0x27, 0xb0, 0x22, 0xe2, 0xbc, 0x49, 0x69, 0xe8,
	0x9d, 0x4f, 0x29, 0x49, 0x5c, 0x61, 0x28, 0xae, 0x40, 0x50, 0xe9, 0x5f, 0x4d, 0xe2, 0x70, 0xe4,
	0xdf, 0xb3, 0x18, 0x2d, 0xab, 0x31, 0xfa, 0x4e, 0x0b, 0x51, 0xa6, 0x70, 0x73, 0x34, 0x0c, 0x42,
	0x8f, 0x7e, 0x33, 0x66, 0x0e, 0x7d, 0xce, 0x78, 0x9e, 0x3f, 0xec, 0x86, 0xe4, 0x82, 0x84, 0xc4,
	0x77, 0xe3, 0x75, 0x72, 0x38, 0x68, 0x07, 0xcc, 0x5e, 0x10, 0xd2, 0xe7, 0x57, 0x89, 0x72, 0x22,
	0x8b, 0xd4, 0x71, 0x86, 0x6e, 0xff, 0xad, 0x0c, 0x2b, 0xa9, 0x85, 0x73, 0x2d, 0x49, 0x85, 0x65,
	0x29, 0x1b, 0x96, 0x9f, 0x49, 0x5b, 0x99, 0x59, 0xcb, 0x7b, 0x9b, 0xb9, 0xbb, 0xc1, 0x00, 0xd2,
	0x0d, 0x36, 0x2c, 0x1d, 0x11, 0x27, 0x9a, 0x86, 0x64, 0x4c, 0x7c, 0x1a, 0xc5, 0x67, 0x41, 0xa5,
	0xa1, 0x4f, 0x60, 0x19, 0xc7, 0x56, 0x09, 0x9f, 0x89, 0xb4, 0x94, 0xa2, 0x32, 0xe5, 0x8e, 0x9c,
	0xcb, 0xb6, 0x17, 0xf1, 0x43, 0x67, 0xd5, 0xb6, 0x8c, 0x6d, 0x03, 0xab, 0x24, 0x74, 0x1f, 0xea,
	0x27, 0x13, 0x22, 0x8e, 0xbc, 0x35, 0xcf, 0x85, 0xcc, 0x08, 0xcc, 0x61, 0x5d, 0x27, 0xa4, 0x57,
	0xcd, 0xe1, 0x30, 0x24, 0x43, 0x47, 0x39, 0x78, 0x19, 0x3a, 0xd3, 0x89, 0xbb, 0x3c, 0xf1, 0xa1,
	0x3c, 0x7e, 0x29, 0x2a, 0x3b, 0xa5, 0xcc, 0xd9, 0x33, 0x18, 0x88, 0x53, 0xaa, 0x11, 0xd1, 0x8f,
	0x05, 0xaa, 0xed, 0x85, 0xc4, 0xe5, 0xcb, 0x2e, 0x72, 0xef, 0x6d, 0x08, 0xef, 0x69, 0x2c, 0xee,
	0x3b, 0x1d, 0x6d, 0xbf, 0x86, 0xfb, 0x8a, 0x87, 0xfb, 0xc4, 0x19, 0xeb, 0xc9, 0x2d, 0x6f, 0x27,
	0x6d, 0x58, 0x12, 0xa1, 0x7b, 0x3c, 0x1d, 0x9f, 0x93, 0x90, 0x6f, 0x65, 0x15, 0x6b, 0x34, 0xfb,
	0x1d, 0xd4, 0xb9, 0x5c, 0x26, 0x11, 0x3d, 0x85, 0x0a, 0x93, 0x2a, 0x93, 0xb4, 0x9d, 0xd9, 0xd8,
	0xcc, 0xb2, 0x98, 0xe3, 0xd1, 0xe7, 0x30, 0xdf, 0xf7, 0xdc, 0xb7, 0x84, 0xc6, 0x35, 0x6c, 0x23,
	0x3b, 0x95, 0xf3, 0x71, 0x8c, 0xb3, 0xff, 0x64, 0xc0, 0x03, 0x85, 0xdd, 0xb9, 0x9c, 0x38, 0x3e,
	0xaf, 0x03, 0x2c, 0x76, 0x44, 0xb6, 0xf8, 0x11, 0xdc, 0x69, 0x05, 0xe3, 0x49, 0xe0, 0x13, 0x9f,
	0xf2, 0x78, 0x33, 0xb8, 0xc7, 0xd6, 0x84, 0x6c, 0x8d, 0x85, 0x75, 0x24, 0xdb, 0x92, 0x84, 0xc0,
	0xdd, 0x22, 0xa2, 0x58, 0x27, 0xb2, 0x50, 0x99, 0x6d, 0x9a, 0x38, 0xa3, 0x33, 0x82, 0xfd, 0x4b,
	0xcd, 0xe3, 0x9a, 0x82, 0x3d, 0x4a, 0x26, 0x2c, 0x75, 0xbe, 0x71, 0x3c, 0x9e, 0xac, 0xe2, 0x34,
	0x66, 0xf0, 0x34, 0x96, 0x26, 0xeb, 0xb5, 0xca, 0x88, 0xf3, 0xc0, 0x3f, 0x0c, 0x2d, 0x11, 0x68,
	0x0b, 0xa0, 0x7d, 0xa8, 0xc9, 0x6c, 0x2a, 0xf6, 0xe2, 0x51, 0xc6, 0xa1, 0x39, 0x1e, 0xc3, 0x72,
	0x0e, 0x7a, 0x0a, 0xeb, 0x2f, 0xbc, 0x4b, 0x32, 0x48, 0x30, 0xc9, 0x81, 0x11, 0x1a, 0x14, 0x70,
	0xd1, 0x57, 0x50, 0x65, 0xa6, 0x45, 0x56, 0x99, 0xef, 0xa2, 0x7d, 0xfd, 0xa2, 0x0c, 0x8a, 0xc5,
	0x04, 0xfb, 0xef, 0x25, 0x40, 0xd9, 0x7c, 0x8c, 0x9a, 0x60, 0xa6, 0x92, 0x67, 0x1c, 0x21, 0xf7,
	0x84, 0xec, 0x14, 0x17, 0x67, 0xe0, 0x4c, 0x27, 0x16, 0x76, 0xc5, 0x3a, 0x65, 0x83, 0x52, 0x4c,
	0x40, 0x8f, 0xa1, 0xca, 0xf4, 0x60, 0x09, 0x47, 0x59, 0x31, 0xa5, 0x25, 0x16, 0x18, 0xf4, 0x13,
	0x80, 0xc4, 0xb8, 0xc8, 0xaa, 0xf2, 0x19, 0x0f, 0xae, 0xb7, 0x1f, 0x2b, 0x33, 0xd0, 0x3e, 0xd4,
	0x93, 0x34, 0xce, 0xd3, 0x52, 0xde, 0x74, 0x2d, 0xd9, 0xe3, 0xd9, 0x04, 0xfb, 0xdf, 0x65, 0x80,
	0x59, 0x4d, 0x42, 0xfb, 0xb0, 0x3c, 0x1b, 0x29, 0xa1, 0x7f, 0x57, 0x91, 0x98, 0xf0, 0x70, 0x0a,
	0x7b, 0x8b, 0xd3, 0x88, 0x7e, 0x00, 0x6b, 0x9d, 0x88, 0x7a, 0x63, 0x87, 0x92, 0x01, 0x8b, 0xde,
	0x23, 0x6f, 0x34, 0xf2, 0x22, 0x7e, 0x26, 0xca, 0x38, 0x8f, 0x55, 0xd0, 0x4c, 0x55, 0x0a, 0x9b,
	0xa9, 0x4f, 0x61, 0x35, 0xd3, 0x2c, 0xf1, 0x1c, 0x5f, 0xc6, 0x59, 0x86, 0xda, 0xb5, 0xd6, 0xf4,
	0xae, 0x75, 0x1f, 0x36, 0x67, 0x70, 0x76, 0x9c, 0x47, 0x84, 0x92, 0x01, 0x26, 0x4e, 0x94, 0xa4,
	0xfb, 0x62, 0x00, 0x5a, 0x87, 0x9a, 0x84, 0x8a, 0xa4, 0x2f, 0x47, 0x7c, 0x3d, 0x12, 0x45, 0xce,
	0x30, 0xce, 0xf1, 0xf1, 0x10, 0x1d, 0x68, 0x0d, 0xd2, 0x81, 0x7f, 0x11, 0xf0, 0xf4, 0xbe, 0xb8,
	0xf7, 0x30, 0xd3, 0xc2, 0xb6, 0x02, 0xdf, 0x17, 0xd9, 0x9a, 0xc1, 0x70, 0x7a, 0x9e, 0xfd, 0x7b,
	0x43, 0x36, 0x25, 0xa9, 0x46, 0x9a, 0x69, 0x75, 0x1a, 0x91, 0xf0, 0x60, 0x20, 0x13, 0x88, 0x1c,
	0xa1, 0x07, 0x00, 0xcd, 0x21, 0xf1, 0x69, 0xef, 0x9d, 0x7b, 0xd0, 0x96, 0x29, 0x4c, 0xa1, 0xb0,
	0x02, 0x25, 0x46, 0x72, 0x91, 0xb6, 0x4c, 0x62, 0x29, 0x2a, 0xef, 0x4d, 0x88, 0x33, 0x96, 0x85,
	0x97, 0x7f, 0xdb, 0x7f, 0x31, 0x60, 0xb3, 0x50, 0x77, 0x96, 0x3f, 0x55, 0xed, 0x07, 0xb2, 0xac,
	0xe8, 0x44, 0x96, 0xd7, 0x54, 0xd5, 0xc4, 0x80, 0xfb, 0x38, 0x08, 0xc6, 0x52, 0x9b, 0x32, 0x96,
	0x23, 0xf5, 0x6e, 0x51, 0x79, 0xff, 0xbb, 0xc5, 0x7f, 0x4b, 0xda, 0xfd, 0x81, 0xd5, 0x34, 0x7e,
	0xd7, 0x60, 0x65, 0xd2, 0x93, 0xf5, 0xae, 0x8c, 0x35, 0x1a, 0x8b, 0x91, 0xd6, 0x34, 0x0c, 0x89,
	0x4f, 0x73, 0xee, 0x65, 0xa2, 0x73, 0x2f, 0x06, 0xe4, 0xb4, 0xd3, 0xe5, 0xef, 0xd2, 0x4e, 0x57,
	0xf2, 0xdb, 0xe9, 0x8c, 0x87, 0xab, 0x79, 0x1e, 0x8e, 0xab, 0x7a, 0x4d, 0xa9, 0xea, 0xeb, 0x50,
	0xeb, 0x51, 0x87, 0x4e, 0x23, 0x19, 0xee, 0x72, 0xc4, 0x3c, 0x23, 0xbe, 0xb4, 0x08, 0xd7, 0x68,
	0xb3, 0x1d, 0xab, 0xe7, 0xef, 0x18, 0xa8, 0x3b, 0x66, 0xff, 0xb1, 0x02, 0xab, 0x99, 0xa4, 0x81,
	0x1a, 0xb0, 0x20, 0xbe, 0x92, 0xb0, 0x48, 0xc6, 0xac, 0xa2, 0xf6, 0xa8, 0x13, 0xf2, 0xea, 0x27,
	0x3d, 0x3d, 0x23, 0xa0, 0xc7, 0xb3, 0x08, 0x10, 0x2e, 0x5d, 0x55, 0x22, 0x40, 0x70, 0x92, 0x8d,
	0x57, 0xcc, 0xac, 0x5c, 0x6b, 0x66, 0x35, 0xc7, 0x4c, 0xd6, 0x91, 0xf1, 0x71, 0x7c, 0xa8, 0x6b,
	0xb2, 0x23, 0x53, 0x89, 0xec, 0xd0, 0x77, 0xfc, 0x01, 0x57, 0x75, 0x9e, 0xab, 0x1a, 0x0f, 0x59,
	0xb2, 0xd2, 0x2a, 0x0a, 0xdf, 0x03, 0xe1, 0xcf, 0x2c, 0x83, 0xa1, 0xb5, 0x0c, 0xc9, 0x25, 0xd6,
	0x45, 0x6a, 0xcb, 0x30, 0xd4, 0xd4, 0x06, 0x7a, 0x6a, 0x63, 0x4d, 0x0b, 0x4b, 0x5a, 0x23, 0x79,
	0x0d, 0xe2, 0x1d, 0xe2, 0x02, 0xd6, 0x89, 0x2c, 0xb8, 0xbb, 0x01, 0x25, 0x3e, 0xf5, 0x9c, 0x11,
	0x9f, 0xd9, 0x0a, 0xa2, 0xe4, 0x1e, 0xb5, 0x24, 0x82, 0xbb, 0x10, 0x90, 0x97, 0xce, 0xee, 0xdc,
	0x32, 0x9d, 0xfd, 0xce, 0x00, 0x24, 0x36, 0xeb, 0xb9, 0x43, 0xe9, 0x88, 0x60, 0x12, 0x4d, 0x47,
	0xb4, 0x30, 0x99, 0xdd, 0x87, 0xfa, 0x4b, 0xc7, 0xf3, 0x7b, 0x6e, 0x10, 0xc6, 0x6d, 0xc8, 0x8c,
	0x20, 0x0e, 0x8e, 0xe7, 0x77, 0x2e, 0x27, 0xc4, 0xa5, 0x02, 0x53, 0xe6, 0x98, 0x34, 0x99, 0x1d,
	0x89, 0xb6, 0x77, 0x71, 0xc1, 0xa3, 0xc2, 0xc0, 0xfc, 0xdb, 0xc6, 0xb0, 0xae, 0x6b, 0xe2, 0x06,
	0xe1, 0xe0, 0xd0, 0x8b, 0x28, 0xfa, 0x0a, 0x60, 0x36, 0xb2, 0x0c, 0x1e, 0x75, 0x96, 0xda, 0x7a,
	0xa8, 0xba, 0x63, 0x05, 0x6b, 0x5f, 0xb2, 0x9b, 0x46, 0x12, 0x97, 0x85, 0x66, 0x35, 0x60, 0x41,
	0x94, 0x1b, 0x32, 0xe0, 0x56, 0x2d, 0xe0, 0x64, 0x8c, 0xbe, 0x04, 0x50, 0xfa, 0x9e, 0xf2, 0x75,
	0x7d, 0x8f, 0x02, 0xb4, 0x7f, 0x0e, 0x4b, 0x9a, 0x47, 0x3f, 0x07, 0x10, 0x70, 0xc5, 0x86, 0x9c,
	0x93, 0xa3, 0x80, 0x58, 0x90, 0xbd, 0xf1, 0xfc, 0x96, 0x33, 0x9e, 0xc8, 0x92, 0x10, 0x0f, 0xed,
	0x1e, 0xac, 0x69, 0x26, 0xcb, 0xa8, 0xca, 0x3e, 0xb0, 0xec, 0x40, 0x2d, 0xe4, 0x10, 0x6e, 0x56,
	0x92, 0xfe, 0xb4, 0xc9, 0x12, 0x61, 0xaf, 0xc3, 0x5d, 0x5d, 0xa8, 0x78, 0xfb, 0xb1, 0xc7, 0xf0,
	0xb1, 0x78, 0x18, 0x2a, 0x7a, 0x93, 0x89, 0x97, 0x6f, 0xb3, 0x7e, 0x5d, 0xa1, 0xcb, 0xae, 0x37,
	0xdb, 0x41, 0xe9, 0xb3, 0xf5, 0x49, 0xf6, 0x36, 0x7c, 0x72, 0xd3, 0x72, 0x52, 0xb1, 0x37, 0xf0,
	0x3d, 0x71, 0xa1, 0x3d, 0xbf, 0x51, 0xb5, 0xdc, 0x5c, 0x60, 0x14, 0xe4, 0x02, 0x7b, 0x02, 0xdb,
	0x37, 0x0b, 0x96, 0x2f, 0x63, 0x33, 0xa3, 0x9d, 0xf0, 0x16, 0x46, 0x8b, 0x49, 0xf6, 0x1f, 0x0c,
	0xd8, 0xe0, 0x29, 0x56, 0xed, 0x33, 0x6f, 0xa3, 0xbb, 0x96, 0xd8, 0x4b, 0xa9, 0xc4, 0xfe, 0xff,
	0xa4, 0x6e, 0xbb, 0x01, 0x56, 0x56, 0x23, 0xe9, 0xf9, 0x67, 0xd0, 0xc8, 0x71, 0x50, 0xac, 0xf0,
	0x7d, 0xa8, 0xc7, 0x4b, 0x46, 0x3c, 0xd2, 0xeb, 0x78, 0x46, 0xb0, 0x5f, 0xc3, 0x07, 0xb9, 0x73,
	0xa5, 0x3f, 0x7f, 0x08, 0x20, 0xb0, 0xfc, 0x9c, 0xdc, 0xd0, 0xfa, 0x2a, 0x50, 0xfb, 0x09, 0xac,
	0xf7, 0x68, 0x30, 0xc9, 0xd1, 0xe7, 0x9a, 0x5a, 0x67, 0x6f, 0x32, 0xbf, 0xa7, 0x66, 0x49, 0x23,
	0xff, 0x6a, 0xc4, 0xdd, 0x31, 0xe7, 0xde, 0x6e, 0x3b, 0xf6, 0x61, 0x59, 0x69, 0x8c, 0xe3, 0xb7,
	0xa5, 0xe4, 0x12, 0xa0, 0xf3, 0x70, 0x0a, 0xcb, 0x3c, 0x29, 0xb6, 0x83, 0x79, 0x92, 0x6d, 0x59,
	0x19, 0xcf, 0x08, 0x9a, 0x5d, 0x95, 0x94, 0x5d, 0xf7, 0x60, 0x4d, 0xd3, 0x5d, 0xd8, 0xb4, 0xf3,
	0x7d, 0xfd, 0x45, 0x13, 0xdd, 0x81, 0x7a, 0xf3, 0xb4, 0x7f, 0x72, 0xd4, 0xec, 0x1f, 0xb4, 0xcc,
	0x39, 0x04, 0x50, 0x3b, 0x6a, 0x1e, 0x9f, 0x36, 0x0f, 0x4d, 0x63, 0xe7, 0xdb, 0x12, 0xac, 0xe5,
	0x3c, 0x07, 0xa1, 0x87, 0xf0, 0x41, 0x0e, 0xf9, 0xec, 0xd4, 0x7f, 0xeb, 0x07, 0xbf, 0xf6, 0xcd,
	0x39, 0x64, 0x6b, 0x6f, 0x02, 0x09, 0x80, 0x75, 0xf1, 0x4e, 0xe8, 0x45, 0x81, 0x6f, 0x1a, 0x68,
	0x4b, 0xbb, 0x96, 0x27, 0x98, 0xf8, 0x0e, 0x6b, 0x96, 0x8a, 0xa5, 0x8c, 0x46, 0xa2, 0x9e, 0x99,
	0x65, 0xf4, 0x31, 0x7c, 0x94, 0x87, 0xe1, 0x2f, 0x3b, 0x89, 0xa8, 0x0a, 0x7a, 0x04, 0x5b, 0x79,
	0xb0, 0xe6, 0x79, 0x14, 0x8c, 0xa6, 0x94, 0xf4, 0x82, 0x90, 0x9a, 0xd5, 0x22, 0x54, 0x2c, 0x87,
	0xa3, 0x6a, 0x3b, 0x7b, 0xb0, 0x9a, 0x79, 0xe5, 0xe1, 0x5e, 0x8c, 0x5c, 0xe2, 0x0f, 0x3c, 0x7f,
	0x68, 0xce, 0xa1, 0x65, 0x00, 0x16, 0xe1, 0x72, 0x6c, 0xec, 0x34, 0x53, 0x4f, 0x20, 0x68, 0x03,
	0xd6, 0x34, 0xc2, 0x19, 0xbf, 0xbd, 0x9a, 0x73, 0x59, 0x06, 0xbf, 0x03, 0x9b, 0xc6, 0xce, 0x7f,
	0x8c, 0xf4, 0x65, 0x12, 0xdd, 0xd3, 0xda, 0x3a, 0xfe, 0x02, 0x3a, 0x30, 0xe7, 0x90, 0x25, 0xaf,
	0x27, 0x82, 0xdc, 0x23, 0x4e, 0xc8, 0x9f, 0x1b, 0x4d, 0x03, 0x6d, 0xc2, 0xbd, 0x54, 0x4b, 0xc1,
	0xd3, 0xec, 0xc0, 0x2c, 0xa1, 0x15, 0x58, 0x54, 0xa2, 0xc5, 0x2c, 0x33, 0x29, 0x0a, 0x21, 0xb9,
	0x80, 0x99, 0x95, 0xb4, 0xfc, 0xa9, 0xeb, 0x12, 0x32, 0x20, 0x03, 0xb3, 0xca, 0x94, 0xd7, 0x4e,
	0xe8, 0x98, 0x0c, 0x4e, 0xa6, 0xd4, 0xac, 0xa5, 0xa6, 0x88, 0x46, 0x68, 0x44, 0x06, 0xe6, 0x7c,
	0xca, 0x86, 0x17, 0x8e, 0xc7, 0xc8, 0x0b, 0x3b, 0xdf, 0x1a, 0xb0, 0x91, 0x39, 0xec, 0xb2, 0x73,
	0x04, 0xa8, 0xbd, 0x3a, 0xed, 0x9c, 0x76, 0xda, 0xe6, 0x1c, 0xf3, 0x7b, 0xaf, 0xd3, 0xc4, 0xad,
	0x9f, 0x1e, 0x1c, 0xbf, 0x34, 0x0d, 0xa6, 0x00, 0xee, 0xbc, 0x3a, 0x3d, 0xc0, 0x9d, 0xde, 0x59,
	0xb3, 0xd5, 0xea, 0x74, 0xfb, 0xcd, 0xe3, 0x56, 0xc7, 0x2c, 0xa1, 0x45, 0x98, 0xef, 0x1e, 0x36,
	0x5b, 0x0c, 0x55, 0x66, 0x93, 0x5a, 0x27, 0x47, 0xdd, 0xc3, 0x4e, 0xbf, 0xd3, 0x36, 0x2b, 0x4c,
	0xde, 0x8b, 0xe6, 0xc1, 0x61, 0xa7, 0x6d, 0x56, 0x39, 0x8b, 0x4d, 0x39, 0x64, 0xc3, 0x1a, 0x1b,
	0xf6, 0x0f, 0x8e, 0x3a, 0xed, 0xb3, 0x93, 0xd3, 0xbe, 0x39, 0xbf, 0xf3, 0x65, 0xfa, 0x28, 0x33,
	0xb9, 0xa7, 0xc7, 0x5f, 0x1f, 0x9f, 0xbc, 0x39, 0x16, 0x67, 0x47, 0x2c, 0x6a, 0x1a, 0xec, 0x1b,
	0x77, 0x7e, 0xd6, 0x69, 0xf5, 0xcd, 0xd2, 0xde, 0x50, 0x79, 0xfe, 0x67, 0xdd, 0x17, 0x7a, 0x0d,
	0xab, 0x99, 0x1f, 0x2d, 0x48, 0xd6, 0x8b, 0xa2, 0xbf, 0x54, 0x8d, 0x87, 0x85, 0x7c, 0x99, 0xad,
	0xe6, 0xf6, 0xfe, 0x55, 0x81, 0x7a, 0xb2, 0x12, 0xfa, 0x0d, 0x3c, 0xb8, 0xbe, 0x8c, 0xa2, 0xc7,
	0xaa, 0xc8, 0x1b, 0x0a, 0x68, 0xe3, 0xd3, 0xf7, 0x03, 0xc7, 0xca, 0xa0, 0xdf, 0x1a, 0xb0, 0x75,
	0x53, 0x0d, 0x45, 0x9f, 0x09, 0xa1, 0xef, 0x59, 0xc4, 0x1b, 0xbb, 0xef, 0x0b, 0x4f, 0xb4, 0xe8,
	0x81, 0x99, 0xae, 0x61, 0xe8, 0x43, 0xf9, 0x56, 0x9b, 0x5f, 0x6d, 0x1b, 0x0f, 0x8a, 0xd8, 0x89,
	0xd0, 0x5f, 0xc0, 0x5a, 0x8e, 0x0a, 0x68, 0xab, 0x50, 0xbb, 0x58, 0xf4, 0x47, 0xd7, 0x20, 0x12,
	0xe9, 0x5d, 0x58, 0x49, 0x15, 0x24, 0x74, 0x3f, 0x56, 0x29, 0xaf, 0xba, 0x35, 0x3e, 0x2c, 0xe0,
	0x26, 0x12, 0xdb, 0xda, 0xe1, 0x46, 0x96, 0x5a, 0x79, 0xd4, 0xca, 0xd6, 0xd8, 0xcc, 0xe1, 0xc4,
	0x52, 0xce, 0x6b, 0xfc, 0x87, 0xea, 0x17, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xd0, 0x50, 0x44,
	0x4a, 0x6b, 0x1d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FlexMatchGameClient is the client API for FlexMatchGame service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FlexMatchGameClient interface {
	CreateGameSession(ctx context.Context, in *CreateGameSessionRequest, opts ...grpc.CallOption) (*CreateGameSessionResponse, error)
}

type flexMatchGameClient struct {
	cc *grpc.ClientConn
}

func NewFlexMatchGameClient(cc *grpc.ClientConn) FlexMatchGameClient {
	return &flexMatchGameClient{cc}
}

func (c *flexMatchGameClient) CreateGameSession(ctx context.Context, in *CreateGameSessionRequest, opts ...grpc.CallOption) (*CreateGameSessionResponse, error) {
	out := new(CreateGameSessionResponse)
	err := c.cc.Invoke(ctx, "/open.FlexMatchGame/CreateGameSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlexMatchGameServer is the server API for FlexMatchGame service.
type FlexMatchGameServer interface {
	CreateGameSession(context.Context, *CreateGameSessionRequest) (*CreateGameSessionResponse, error)
}

// UnimplementedFlexMatchGameServer can be embedded to have forward compatible implementations.
type UnimplementedFlexMatchGameServer struct {
}

func (*UnimplementedFlexMatchGameServer) CreateGameSession(ctx context.Context, req *CreateGameSessionRequest) (*CreateGameSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGameSession not implemented")
}

func RegisterFlexMatchGameServer(s *grpc.Server, srv FlexMatchGameServer) {
	s.RegisterService(&_FlexMatchGame_serviceDesc, srv)
}

func _FlexMatchGame_CreateGameSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGameSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlexMatchGameServer).CreateGameSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/open.FlexMatchGame/CreateGameSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlexMatchGameServer).CreateGameSession(ctx, req.(*CreateGameSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FlexMatchGame_serviceDesc = grpc.ServiceDesc{
	ServiceName: "open.FlexMatchGame",
	HandlerType: (*FlexMatchGameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGameSession",
			Handler:    _FlexMatchGame_CreateGameSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "match_rpc_service.proto",
}

// FlexMatchClient is the client API for FlexMatch service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FlexMatchClient interface {
	//创建一个新的对战配置
	CreateMatchmakingConfiguration(ctx context.Context, in *CreateMatchmakingConfigurationRequest, opts ...grpc.CallOption) (*CreateMatchmakingConfigurationResponse, error)
	//检索对战配置
	DescribeMatchmakingConfiguration(ctx context.Context, in *DescribeMatchmakingConfigurationRequest, opts ...grpc.CallOption) (*DescribeMatchmakingConfigurationResponse, error)
	//创建对战请求
	StartMatchmaking(ctx context.Context, in *StartMatchmakingRequest, opts ...grpc.CallOption) (*StartMatchmakingResponse, error)
	//检索对战请求详细信息 (30秒仍为收到匹配事件，查询ticket状态)
	DescribeMatchmaking(ctx context.Context, in *DescribeMatchmakingRequest, opts ...grpc.CallOption) (*DescribeMatchmakingResponse, error)
	//您可以随时通过调用，取消对战请求StopMatchmaking使用请求的票证 ID
	StopMatchmaking(ctx context.Context, in *StopMatchmakingRequest, opts ...grpc.CallOption) (*StopMatchmakingResponse, error)
	//接受匹配
	AcceptMatch(ctx context.Context, in *AcceptMatchRequest, opts ...grpc.CallOption) (*AcceptMatchResponse, error)
}

type flexMatchClient struct {
	cc *grpc.ClientConn
}

func NewFlexMatchClient(cc *grpc.ClientConn) FlexMatchClient {
	return &flexMatchClient{cc}
}

func (c *flexMatchClient) CreateMatchmakingConfiguration(ctx context.Context, in *CreateMatchmakingConfigurationRequest, opts ...grpc.CallOption) (*CreateMatchmakingConfigurationResponse, error) {
	out := new(CreateMatchmakingConfigurationResponse)
	err := c.cc.Invoke(ctx, "/open.FlexMatch/CreateMatchmakingConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flexMatchClient) DescribeMatchmakingConfiguration(ctx context.Context, in *DescribeMatchmakingConfigurationRequest, opts ...grpc.CallOption) (*DescribeMatchmakingConfigurationResponse, error) {
	out := new(DescribeMatchmakingConfigurationResponse)
	err := c.cc.Invoke(ctx, "/open.FlexMatch/DescribeMatchmakingConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flexMatchClient) StartMatchmaking(ctx context.Context, in *StartMatchmakingRequest, opts ...grpc.CallOption) (*StartMatchmakingResponse, error) {
	out := new(StartMatchmakingResponse)
	err := c.cc.Invoke(ctx, "/open.FlexMatch/StartMatchmaking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flexMatchClient) DescribeMatchmaking(ctx context.Context, in *DescribeMatchmakingRequest, opts ...grpc.CallOption) (*DescribeMatchmakingResponse, error) {
	out := new(DescribeMatchmakingResponse)
	err := c.cc.Invoke(ctx, "/open.FlexMatch/DescribeMatchmaking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flexMatchClient) StopMatchmaking(ctx context.Context, in *StopMatchmakingRequest, opts ...grpc.CallOption) (*StopMatchmakingResponse, error) {
	out := new(StopMatchmakingResponse)
	err := c.cc.Invoke(ctx, "/open.FlexMatch/StopMatchmaking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flexMatchClient) AcceptMatch(ctx context.Context, in *AcceptMatchRequest, opts ...grpc.CallOption) (*AcceptMatchResponse, error) {
	out := new(AcceptMatchResponse)
	err := c.cc.Invoke(ctx, "/open.FlexMatch/AcceptMatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlexMatchServer is the server API for FlexMatch service.
type FlexMatchServer interface {
	//创建一个新的对战配置
	CreateMatchmakingConfiguration(context.Context, *CreateMatchmakingConfigurationRequest) (*CreateMatchmakingConfigurationResponse, error)
	//检索对战配置
	DescribeMatchmakingConfiguration(context.Context, *DescribeMatchmakingConfigurationRequest) (*DescribeMatchmakingConfigurationResponse, error)
	//创建对战请求
	StartMatchmaking(context.Context, *StartMatchmakingRequest) (*StartMatchmakingResponse, error)
	//检索对战请求详细信息 (30秒仍为收到匹配事件，查询ticket状态)
	DescribeMatchmaking(context.Context, *DescribeMatchmakingRequest) (*DescribeMatchmakingResponse, error)
	//您可以随时通过调用，取消对战请求StopMatchmaking使用请求的票证 ID
	StopMatchmaking(context.Context, *StopMatchmakingRequest) (*StopMatchmakingResponse, error)
	//接受匹配
	AcceptMatch(context.Context, *AcceptMatchRequest) (*AcceptMatchResponse, error)
}

// UnimplementedFlexMatchServer can be embedded to have forward compatible implementations.
type UnimplementedFlexMatchServer struct {
}

func (*UnimplementedFlexMatchServer) CreateMatchmakingConfiguration(ctx context.Context, req *CreateMatchmakingConfigurationRequest) (*CreateMatchmakingConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMatchmakingConfiguration not implemented")
}
func (*UnimplementedFlexMatchServer) DescribeMatchmakingConfiguration(ctx context.Context, req *DescribeMatchmakingConfigurationRequest) (*DescribeMatchmakingConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeMatchmakingConfiguration not implemented")
}
func (*UnimplementedFlexMatchServer) StartMatchmaking(ctx context.Context, req *StartMatchmakingRequest) (*StartMatchmakingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartMatchmaking not implemented")
}
func (*UnimplementedFlexMatchServer) DescribeMatchmaking(ctx context.Context, req *DescribeMatchmakingRequest) (*DescribeMatchmakingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeMatchmaking not implemented")
}
func (*UnimplementedFlexMatchServer) StopMatchmaking(ctx context.Context, req *StopMatchmakingRequest) (*StopMatchmakingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopMatchmaking not implemented")
}
func (*UnimplementedFlexMatchServer) AcceptMatch(ctx context.Context, req *AcceptMatchRequest) (*AcceptMatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptMatch not implemented")
}

func RegisterFlexMatchServer(s *grpc.Server, srv FlexMatchServer) {
	s.RegisterService(&_FlexMatch_serviceDesc, srv)
}

func _FlexMatch_CreateMatchmakingConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMatchmakingConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlexMatchServer).CreateMatchmakingConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/open.FlexMatch/CreateMatchmakingConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlexMatchServer).CreateMatchmakingConfiguration(ctx, req.(*CreateMatchmakingConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlexMatch_DescribeMatchmakingConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeMatchmakingConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlexMatchServer).DescribeMatchmakingConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/open.FlexMatch/DescribeMatchmakingConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlexMatchServer).DescribeMatchmakingConfiguration(ctx, req.(*DescribeMatchmakingConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlexMatch_StartMatchmaking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartMatchmakingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlexMatchServer).StartMatchmaking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/open.FlexMatch/StartMatchmaking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlexMatchServer).StartMatchmaking(ctx, req.(*StartMatchmakingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlexMatch_DescribeMatchmaking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeMatchmakingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlexMatchServer).DescribeMatchmaking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/open.FlexMatch/DescribeMatchmaking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlexMatchServer).DescribeMatchmaking(ctx, req.(*DescribeMatchmakingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlexMatch_StopMatchmaking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopMatchmakingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlexMatchServer).StopMatchmaking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/open.FlexMatch/StopMatchmaking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlexMatchServer).StopMatchmaking(ctx, req.(*StopMatchmakingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlexMatch_AcceptMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptMatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlexMatchServer).AcceptMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/open.FlexMatch/AcceptMatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlexMatchServer).AcceptMatch(ctx, req.(*AcceptMatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FlexMatch_serviceDesc = grpc.ServiceDesc{
	ServiceName: "open.FlexMatch",
	HandlerType: (*FlexMatchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMatchmakingConfiguration",
			Handler:    _FlexMatch_CreateMatchmakingConfiguration_Handler,
		},
		{
			MethodName: "DescribeMatchmakingConfiguration",
			Handler:    _FlexMatch_DescribeMatchmakingConfiguration_Handler,
		},
		{
			MethodName: "StartMatchmaking",
			Handler:    _FlexMatch_StartMatchmaking_Handler,
		},
		{
			MethodName: "DescribeMatchmaking",
			Handler:    _FlexMatch_DescribeMatchmaking_Handler,
		},
		{
			MethodName: "StopMatchmaking",
			Handler:    _FlexMatch_StopMatchmaking_Handler,
		},
		{
			MethodName: "AcceptMatch",
			Handler:    _FlexMatch_AcceptMatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "match_rpc_service.proto",
}
