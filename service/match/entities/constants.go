// entities
// @author LanguageY++2013 2022/11/10 09:48
// @company soulgame
package entities

import (
	"log"
)

//组合 key:人数    value:数量
type  combinationItem struct {
	//值
	Value 	 		int
	//数量
	Quality 		int
}

type combination []combinationItem


type numCombination []combination

var (
	arrangementCombination  = map[int]numCombination{
		1 : {
			{{1,1}},
		},
		2: {
			{{2, 1}},
			{{1, 2}},
		},
		3: {
			{{3, 1}},
			{{2, 1},{1, 1}},
			{{1, 3}},
		},
		4: {
			{{4, 1}},
			{{3, 1},{1, 1}},
			{{2, 2}},
			{{1, 4}},
		},
		5: {
			{{5, 1}},
			{{4, 1},{1, 1}},
			{{3, 1},{2, 1}},
			{{3, 1},{1, 2}},
			{{2, 2},{1, 1}},
			{{2, 1},{1, 3}},
			{{1,5}},
		},
		6: {
			{{6, 1}},
			{{5, 1},{1, 1}},
			{{4, 1},{2, 1}},
			{{4, 1},{1, 2}},
			{{3, 2}},
			{{3, 1}, {2, 1}, {1,1}},
			{{3, 1}, {1, 3}},
			{{2, 3}},
			{{2, 2},{1, 2}},
			{{2, 1},{1, 4}},
			{{1,6}},
		},
		7: {
			{{7, 1}},
			{{6, 1},{1, 1}},
			{{5, 1},{2, 1}},
			{{5, 1},{1, 2}},
			{{4, 1},{3, 1}},
			{{4, 1},{2, 1},{1, 1}},
			{{4, 1},{1, 3}},
			{{3, 2},{1, 1}},
			{{3, 1}, {2, 2}},
			{{3, 1}, {1, 4}},
			{{2, 3},{1, 1}},
			{{2, 2},{1, 3}},
			{{2, 1},{1, 5}},
			{{1,7}},
		},
		8: {
			{{8, 1}},
			{{7, 1},{1, 1}},
			{{6, 1},{2, 1}},
			{{6, 1},{1, 2}},
			{{5, 1},{3, 1}},
			{{5, 1},{2, 1},{1, 1}},
			{{5, 1},{1, 3}},
			{{4, 2}},
			{{4, 1},{3, 1},{1, 1}},
			{{4, 1},{2, 2}},
			{{4, 1},{1, 4}},
			{{3, 2},{2, 1}},
			{{3, 2},{1, 2}},
			{{3, 1}, {2, 2},{1, 1}},
			{{3, 1}, {1, 5}},
			{{2, 3},{1, 2}},
			{{2, 2},{1, 4}},
			{{2, 1},{1, 6}},
			{{1,8}},
		},
		9: {
			{{9, 1}},
			{{8, 1},{1, 1}},
			{{7, 1},{2, 1}},
			{{7, 1},{1, 2}},
			{{6, 1},{3, 1}},
			{{6, 1},{2, 1},{1, 1}},
			{{6, 1},{1, 3}},
			{{5, 1},{4, 1}},
			{{5, 1},{3, 1},{1, 1}},
			{{5, 1},{2, 2}},
			{{5, 1},{1, 4}},
			{{4, 2},{1, 1}},
			{{4, 1},{3, 1},{2, 1}},
			{{4, 1},{3, 1},{1, 2}},
			{{4, 1},{2, 2},{1, 1}},
			{{4, 1},{2, 1},{1, 3}},
			{{4, 1},{1, 5}},
			{{3, 3}},
			{{3, 2},{2, 1},{1, 1}},
			{{3, 2},{1, 3}},
			{{3, 1},{2, 3}},
			{{3, 1}, {2, 2},{1, 2}},
			{{3, 1}, {1, 6}},
			{{2, 4},{1, 1}},
			{{2, 3},{1, 3}},
			{{2, 2},{1, 5}},
			{{2, 1},{1, 7}},
			{{1,9}},
		},
		10: {
			{{10, 1}},
			{{9, 1},{1,1}},
			{{8, 1},{2, 1}},
			{{8, 1},{1, 2}},
			{{7, 1},{3, 1}},
			{{7, 1},{2, 1},{1, 1}},
			{{7, 1},{1, 3}},
			{{6, 1},{4, 1}},
			{{6, 1},{3, 1},{1,1}},
			{{6, 1},{2, 2}},
			{{6, 1},{2, 1},{1,2}},
			{{6, 1},{1, 4}},
			{{5, 2}},
			{{5, 1},{4, 1},{1, 1}},
			{{5, 1},{3, 1},{2, 1}},
			{{5, 1},{3, 1},{1, 2}},
			{{5, 1},{2, 2},{1, 1}},
			{{5, 1},{1, 5}},
			{{4, 2},{2, 1}},
			{{4, 2},{1, 2}},
			{{4, 1},{3, 1},{2, 1},{1, 1}},
			{{4, 1},{3, 1},{1, 3}},
			{{4, 1},{2, 3}},
			{{4, 1},{2, 2},{1, 2}},
			{{4, 1},{2, 1},{1, 4}},
			{{4, 1},{1, 6}},
			{{3, 3},{1,1}},
			{{3, 2},{2, 2}},
			{{3, 2},{1, 4}},
			{{3, 1},{2, 3},{1, 1}},
			{{3, 1},{2, 2},{1, 3}},
			{{3, 1}, {1, 7}},
			{{2, 5}},
			{{2, 4},{1,2}},
			{{2, 3},{1, 4}},
			{{2, 2},{1, 6}},
			{{2, 1},{1, 8}},
			{{1,10}},
		},
	}
)

func sum(com combination) (sum int){
	for _, v := range com {
		sum += v.Value * v.Quality
	}

	return sum
}

func init() {
	//验算
	for total, coms := range arrangementCombination {
		for _, com := range coms {
			if sum(com) != total {
				log.Panicf("%v sum != %d", com, total)
			}
		}
	}
}